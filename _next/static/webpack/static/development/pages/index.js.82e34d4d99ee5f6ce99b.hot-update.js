webpackHotUpdate("static/development/pages/index.js",{

/***/ "./src/components/common.tsx":
/*!***********************************!*\
  !*** ./src/components/common.tsx ***!
  \***********************************/
/*! exports provided: defaultImage, MobileHeader, NavLink, Sidebar, Footer, AppFrame, Storefront */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultImage", function() { return defaultImage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MobileHeader", function() { return MobileHeader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NavLink", function() { return NavLink; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Sidebar", function() { return Sidebar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Footer", function() { return Footer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppFrame", function() { return AppFrame; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Storefront", function() { return Storefront; });
/* harmony import */ var _babel_runtime_corejs2_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime-corejs2/helpers/esm/toConsumableArray */ "./node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray.js");
/* harmony import */ var _babel_runtime_corejs2_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime-corejs2/helpers/esm/extends */ "./node_modules/@babel/runtime-corejs2/helpers/esm/extends.js");
/* harmony import */ var _babel_runtime_corejs2_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime-corejs2/helpers/esm/slicedToArray */ "./node_modules/@babel/runtime-corejs2/helpers/esm/slicedToArray.js");
/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! styled-jsx/style */ "./node_modules/styled-jsx/style.js");
/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(styled_jsx_style__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/head */ "./node_modules/next/dist/next-server/lib/head.js");
/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_head__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/link */ "./node_modules/next/link.js");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _hooks__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./hooks */ "./src/components/hooks.ts");
/* harmony import */ var _layout__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./layout */ "./src/components/layout.tsx");
/* harmony import */ var _section__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./section */ "./src/components/section.tsx");
/* harmony import */ var _shopping__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./shopping */ "./src/components/shopping.tsx");
/* harmony import */ var _style__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./style */ "./src/components/style.ts");
/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./errors */ "./src/components/errors.tsx");



var _jsxFileName = "/Users/yaroslav/Developer/Study/NIT/LabNext/src/components/common.tsx";

var __jsx = react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement;








 //TODO: provide default image for product

var defaultImage = "";

/**
 * Header for mobile devices to invode sidebar
 * @param props title and hamburger menu click handler
 */
var MobileHeader = function MobileHeader(props) {
  var shown = Object(_hooks__WEBPACK_IMPORTED_MODULE_7__["useMobileScroll"])(true, 50);
  var theme = Object(react__WEBPACK_IMPORTED_MODULE_6__["useContext"])(_style__WEBPACK_IMPORTED_MODULE_11__["ThemeContext"]);
  var look = Object(react__WEBPACK_IMPORTED_MODULE_6__["useContext"])(_style__WEBPACK_IMPORTED_MODULE_11__["LookContext"]);
  return __jsx(react__WEBPACK_IMPORTED_MODULE_6___default.a.Fragment, null, __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a, {
    id: "3765046340",
    dynamic: [theme.mobileHeaderColor, theme.alternateTextSubcolor, theme.shadowColor, theme.textSubcolor, look.font, look.mediumSize, theme.textColor, theme.textColor],
    __self: this
  }, "header.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;z-index:10;width:100%;height:50px;position:fixed;top:0;background-color:".concat(theme.mobileHeaderColor, ";-webkit-transition:-webkit-transform 0.2s 0s ease-in;-webkit-transition:transform 0.2s 0s ease-in;transition:transform 0.2s 0s ease-in;border-bottom:solid 1px ").concat(theme.alternateTextSubcolor, ";}header.__jsx-style-dynamic-selector::before{content:\"\";position:absolute;display:block;height:100%;width:100%;box-shadow:").concat(theme.shadowColor, " 0px 3px 10px 3px;}header.hidden.__jsx-style-dynamic-selector{-webkit-transform:translateY(-50px);-ms-transform:translateY(-50px);transform:translateY(-50px);}button.__jsx-style-dynamic-selector{-webkit-appearance:none;-moz-appearance:none;appearance:none;position:relative;border:none;background:none;padding:0;margin:5px 10px;width:40px;height:40px;display:block;padding-right:10px;border-right:solid 2px ").concat(theme.textSubcolor, ";}span.__jsx-style-dynamic-selector{font-family:").concat(look.font, ";font-size:").concat(look.mediumSize, "px;color:").concat(theme.textColor, ";line-height:50px;overflow:hidden;text-overflow:ellipsis;}.spacer.__jsx-style-dynamic-selector{margin-top:50px;}.line.__jsx-style-dynamic-selector{width:100%;height:4px;border-radius:2px;background-color:").concat(theme.textColor, ";margin:5px 0;pointer-events:none;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/Users/yaroslav/Developer/Study/NIT/LabNext/src/components/common.tsx */")), __jsx("header", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["3765046340", [theme.mobileHeaderColor, theme.alternateTextSubcolor, theme.shadowColor, theme.textSubcolor, look.font, look.mediumSize, theme.textColor, theme.textColor]]]) + " " + ((shown ? "" : "hidden") || ""),
    __source: {
      fileName: _jsxFileName,
      lineNumber: 86
    },
    __self: this
  }, __jsx("button", {
    onClick: function onClick() {
      if (props.onHamburger) props.onHamburger();
    },
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["3765046340", [theme.mobileHeaderColor, theme.alternateTextSubcolor, theme.shadowColor, theme.textSubcolor, look.font, look.mediumSize, theme.textColor, theme.textColor]]]) + " " + ((props.animated ? "animated" : "") || ""),
    __source: {
      fileName: _jsxFileName,
      lineNumber: 87
    },
    __self: this
  }, __jsx("div", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["3765046340", [theme.mobileHeaderColor, theme.alternateTextSubcolor, theme.shadowColor, theme.textSubcolor, look.font, look.mediumSize, theme.textColor, theme.textColor]]]) + " " + "line",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 90
    },
    __self: this
  }), __jsx("div", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["3765046340", [theme.mobileHeaderColor, theme.alternateTextSubcolor, theme.shadowColor, theme.textSubcolor, look.font, look.mediumSize, theme.textColor, theme.textColor]]]) + " " + "line",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 91
    },
    __self: this
  }), __jsx("div", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["3765046340", [theme.mobileHeaderColor, theme.alternateTextSubcolor, theme.shadowColor, theme.textSubcolor, look.font, look.mediumSize, theme.textColor, theme.textColor]]]) + " " + "line",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 92
    },
    __self: this
  })), __jsx("span", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["3765046340", [theme.mobileHeaderColor, theme.alternateTextSubcolor, theme.shadowColor, theme.textSubcolor, look.font, look.mediumSize, theme.textColor, theme.textColor]]]),
    __source: {
      fileName: _jsxFileName,
      lineNumber: 94
    },
    __self: this
  }, props.title)), __jsx("div", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["3765046340", [theme.mobileHeaderColor, theme.alternateTextSubcolor, theme.shadowColor, theme.textSubcolor, look.font, look.mediumSize, theme.textColor, theme.textColor]]]) + " " + "spacer",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 96
    },
    __self: this
  }));
};

/**
 * Sidebar link used to navigate between pages
 * @param props optional thumbnail, label, href, whether is selected and optional tooltip
 */
var NavLink = function NavLink(props) {
  var theme = Object(react__WEBPACK_IMPORTED_MODULE_6__["useContext"])(_style__WEBPACK_IMPORTED_MODULE_11__["ThemeContext"]);
  var look = Object(react__WEBPACK_IMPORTED_MODULE_6__["useContext"])(_style__WEBPACK_IMPORTED_MODULE_11__["LookContext"]);
  return __jsx(react__WEBPACK_IMPORTED_MODULE_6___default.a.Fragment, null, __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a, {
    id: "1591376557",
    dynamic: [theme.alternateTextColor, look.font, props.selected ? look.largeSize : look.mediumSize, props.selected ? 800 : 400],
    __self: this
  }, "a.__jsx-style-dynamic-selector{-webkit-text-decoration:none;text-decoration:none;display:contents;padding:10px 20px;}div.__jsx-style-dynamic-selector{grid-column:1;width:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}span.__jsx-style-dynamic-selector{text-overflow:ellipsis;overflow:hidden;grid-column:2;color:".concat(theme.alternateTextColor, ";font-family:").concat(look.font, ";font-size:").concat(props.selected ? look.largeSize : look.mediumSize, "px;font-weight:").concat(props.selected ? 800 : 400, ";margin:5px 0;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy95YXJvc2xhdi9EZXZlbG9wZXIvU3R1ZHkvTklUL0xhYk5leHQvc3JjL2NvbXBvbmVudHMvY29tbW9uLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFrSG9CLEFBR3NDLEFBS1AsQUFPUyxjQU5aLFNBT0ssRUFOSCxjQU9DLFdBYkcsR0Fja0IsY0FiakIsa0JBQ3RCLEdBYTZDLFdBUmxCLDhCQVNrQix5Q0FDQSw0QkFUdEIsYUFVTixhQUNqQixtRUFWQSIsImZpbGUiOiIvVXNlcnMveWFyb3NsYXYvRGV2ZWxvcGVyL1N0dWR5L05JVC9MYWJOZXh0L3NyYy9jb21wb25lbnRzL2NvbW1vbi50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSGVhZCBmcm9tIFwibmV4dC9oZWFkXCI7XG5pbXBvcnQgTGluayBmcm9tIFwibmV4dC9saW5rXCI7XG5pbXBvcnQgUmVhY3QsIHsgdXNlQ29udGV4dCwgdXNlRWZmZWN0LCB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBTdG9yZUl0ZW0sIFRyb25DYXRlZ29yeSB9IGZyb20gXCIuLi9zaGFyZWQvY29tcG9uZW50c1wiO1xuaW1wb3J0IHsgdXNlQ2xpY2ssIHVzZUtleURvd24sIHVzZU1vYmlsZVNjcm9sbCwgdXNlV2luZG93Qm91bmRzIH0gZnJvbSBcIi4vaG9va3NcIjtcbmltcG9ydCB7IE5vU1NSLCBWU3BhY2VkIH0gZnJvbSBcIi4vbGF5b3V0XCI7XG5pbXBvcnQgeyBTZWN0aW9uLCBTZWN0aW9uUHJvcHMgfSBmcm9tIFwiLi9zZWN0aW9uXCI7XG5pbXBvcnQgeyBTQ0FjdGlvblR5cGUsIFNob3BwaW5nQ2FydCwgU2hvcHBpbmdDYXJ0Q29udGV4dCwgdXNlU2hvcHBpbmdDYXJ0IH0gZnJvbSBcIi4vc2hvcHBpbmdcIjtcbmltcG9ydCB7IERhcmssIExpZ2h0LCBMb29rQ29udGV4dCwgVGhlbWVDb250ZXh0IH0gZnJvbSBcIi4vc3R5bGVcIjtcbmltcG9ydCB7IHVzZU1lc3NhZ2VEaXNwYXRjaCwgU3RkRXJyQ29udGV4dCwgRXJyb3JNc2cgfSBmcm9tIFwiLi9lcnJvcnNcIjtcblxuLy9UT0RPOiBwcm92aWRlIGRlZmF1bHQgaW1hZ2UgZm9yIHByb2R1Y3RcbmV4cG9ydCBjb25zdCBkZWZhdWx0SW1hZ2UgPSBcIlwiO1xuXG5pbnRlcmZhY2UgTW9iaWxlSGVhZGVyUHJvcHMge1xuICAgIG9uSGFtYnVyZ2VyPzogKCkgPT4gdm9pZDtcbiAgICB0aXRsZTogc3RyaW5nO1xuICAgIGFuaW1hdGVkPzogYm9vbGVhbjtcbn1cbi8qKlxuICogSGVhZGVyIGZvciBtb2JpbGUgZGV2aWNlcyB0byBpbnZvZGUgc2lkZWJhclxuICogQHBhcmFtIHByb3BzIHRpdGxlIGFuZCBoYW1idXJnZXIgbWVudSBjbGljayBoYW5kbGVyXG4gKi9cbmV4cG9ydCBjb25zdCBNb2JpbGVIZWFkZXI6IFJlYWN0LkZDPE1vYmlsZUhlYWRlclByb3BzPiA9IHByb3BzID0+IHtcbiAgICBsZXQgc2hvd24gPSB1c2VNb2JpbGVTY3JvbGwodHJ1ZSwgNTApXG4gICAgbGV0IHRoZW1lID0gdXNlQ29udGV4dChUaGVtZUNvbnRleHQpXG4gICAgbGV0IGxvb2sgPSB1c2VDb250ZXh0KExvb2tDb250ZXh0KVxuICAgIHJldHVybiA8PlxuICAgICAgICA8c3R5bGUganN4PntgXG4gICAgICAgICAgICBoZWFkZXIge1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAgICAgei1pbmRleDogMTA7XG4gICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiA1MHB4O1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICAgICAgICAgICAgICB0b3A6IDA7XG4gICAgICAgICAgICAgICAgLyogbGVmdDogMDsgKi9cbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke3RoZW1lLm1vYmlsZUhlYWRlckNvbG9yfTtcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC4ycyAwcyBlYXNlLWluO1xuICAgICAgICAgICAgICAgIGJvcmRlci1ib3R0b206IHNvbGlkIDFweCAke3RoZW1lLmFsdGVybmF0ZVRleHRTdWJjb2xvcn07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoZWFkZXI6OmJlZm9yZSB7XG4gICAgICAgICAgICAgICAgY29udGVudDogXCJcIjtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgICAgIGJveC1zaGFkb3c6ICR7dGhlbWUuc2hhZG93Q29sb3J9IDBweCAzcHggMTBweCAzcHg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoZWFkZXIuaGlkZGVuIHtcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwcHgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnV0dG9uIHtcbiAgICAgICAgICAgICAgICBhcHBlYXJhbmNlOiBub25lO1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgICAgICAgICBib3JkZXI6IG5vbmU7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogbm9uZTtcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAwO1xuICAgICAgICAgICAgICAgIG1hcmdpbjogNXB4IDEwcHg7XG4gICAgICAgICAgICAgICAgd2lkdGg6IDQwcHg7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiA0MHB4O1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgICAgICAgIHBhZGRpbmctcmlnaHQ6IDEwcHg7XG4gICAgICAgICAgICAgICAgYm9yZGVyLXJpZ2h0OiBzb2xpZCAycHggJHt0aGVtZS50ZXh0U3ViY29sb3J9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3BhbiB7XG4gICAgICAgICAgICAgICAgZm9udC1mYW1pbHk6ICR7bG9vay5mb250fTtcbiAgICAgICAgICAgICAgICBmb250LXNpemU6ICR7bG9vay5tZWRpdW1TaXplfXB4O1xuICAgICAgICAgICAgICAgIGNvbG9yOiAke3RoZW1lLnRleHRDb2xvcn07XG4gICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDUwcHg7XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgICAgICAgICAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC5zcGFjZXIge1xuICAgICAgICAgICAgICAgIG1hcmdpbi10b3A6IDUwcHg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAubGluZSB7XG4gICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiA0cHg7XG4gICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMnB4O1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7dGhlbWUudGV4dENvbG9yfTtcbiAgICAgICAgICAgICAgICBtYXJnaW46IDVweCAwO1xuICAgICAgICAgICAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICAgICAgICAgICAgfVxuICAgICAgICBgfTwvc3R5bGU+XG4gICAgICAgIDxoZWFkZXIgY2xhc3NOYW1lPXtzaG93biA/IFwiXCIgOiBcImhpZGRlblwifT5cbiAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPXtwcm9wcy5hbmltYXRlZCA/IFwiYW5pbWF0ZWRcIiA6IFwiXCJ9IG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocHJvcHMub25IYW1idXJnZXIpIHByb3BzLm9uSGFtYnVyZ2VyKClcbiAgICAgICAgICAgIH19PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibGluZVwiIC8+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJsaW5lXCIgLz5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxpbmVcIiAvPlxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8c3Bhbj57cHJvcHMudGl0bGV9PC9zcGFuPlxuICAgICAgICA8L2hlYWRlcj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzcGFjZXJcIiAvPlxuICAgIDwvPlxufVxuXG5pbnRlcmZhY2UgTmF2TGlua1Byb3BzIHtcbiAgICB0aHVtYj86IEpTWC5FbGVtZW50O1xuICAgIGxhYmVsOiBzdHJpbmc7XG4gICAgaHJlZjogc3RyaW5nO1xuICAgIHNlbGVjdGVkPzogYm9vbGVhbjtcbiAgICB0b29sdGlwPzogc3RyaW5nO1xufVxuLyoqXG4gKiBTaWRlYmFyIGxpbmsgdXNlZCB0byBuYXZpZ2F0ZSBiZXR3ZWVuIHBhZ2VzXG4gKiBAcGFyYW0gcHJvcHMgb3B0aW9uYWwgdGh1bWJuYWlsLCBsYWJlbCwgaHJlZiwgd2hldGhlciBpcyBzZWxlY3RlZCBhbmQgb3B0aW9uYWwgdG9vbHRpcFxuICovXG5leHBvcnQgY29uc3QgTmF2TGluazogUmVhY3QuRkM8TmF2TGlua1Byb3BzPiA9IHByb3BzID0+IHtcbiAgICBsZXQgdGhlbWUgPSB1c2VDb250ZXh0KFRoZW1lQ29udGV4dClcbiAgICBsZXQgbG9vayA9IHVzZUNvbnRleHQoTG9va0NvbnRleHQpXG4gICAgcmV0dXJuIDw+XG4gICAgICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgICAgICAgIGEge1xuICAgICAgICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBjb250ZW50cztcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAxMHB4IDIwcHg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkaXYge1xuICAgICAgICAgICAgICAgIGdyaWQtY29sdW1uOiAxO1xuICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNwYW4ge1xuICAgICAgICAgICAgICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuICAgICAgICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICAgICAgICAgICAgZ3JpZC1jb2x1bW46IDI7XG4gICAgICAgICAgICAgICAgY29sb3I6ICR7dGhlbWUuYWx0ZXJuYXRlVGV4dENvbG9yfTtcbiAgICAgICAgICAgICAgICBmb250LWZhbWlseTogJHtsb29rLmZvbnR9O1xuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogJHtwcm9wcy5zZWxlY3RlZCA/IGxvb2subGFyZ2VTaXplIDogbG9vay5tZWRpdW1TaXplfXB4O1xuICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiAke3Byb3BzLnNlbGVjdGVkID8gODAwIDogNDAwfTtcbiAgICAgICAgICAgICAgICBtYXJnaW46IDVweCAwO1xuICAgICAgICAgICAgfVxuICAgICAgICBgfTwvc3R5bGU+XG4gICAgICAgIDxMaW5rIGhyZWY9e3Byb3BzLmhyZWZ9PlxuICAgICAgICAgICAgPGEgdGl0bGU9e3Byb3BzLnRvb2x0aXB9PlxuICAgICAgICAgICAgICAgIDxkaXY+e3Byb3BzLnRodW1ifTwvZGl2PlxuICAgICAgICAgICAgICAgIDxzcGFuPntwcm9wcy5sYWJlbH08L3NwYW4+XG4gICAgICAgICAgICA8L2E+XG4gICAgICAgIDwvTGluaz5cbiAgICA8Lz5cbn1cblxuaW50ZXJmYWNlIFNpZGViYXJQcm9wcyB7XG4gICAgcGF0aD86IHN0cmluZztcbiAgICBoaWRkZW4/OiBib29sZWFuO1xuICAgIGNhdGVnb3JpZXM6IFRyb25DYXRlZ29yeVtdO1xufVxuLyoqXG4gKiBTaWRlYmFyIHRoYXQgY29udGFpbnMgTmF2aWdhdGlvbiAnbiBzdHVmZlxuICogQHBhcmFtIHBhdGggb3B0aW9uYWwgLS0gY3VycmVudCBwYWdlIHBhdGggKHdpdGhvdXQgcXVlcnJ5KVxuICogQHBhcmFtIGhpZGRlbiB3aGV0aGVyIGhpZGRlbiBvciBub3QgKGZvciBtb2JpbGUgdXNlKVxuICogQHBhcmFtIGNhdGVnb3JpZXMgY2F0ZWdvcmllcyBvZiBwcm9kdWN0cyAod2lsbCBnZW5lcmF0ZSBsaW5rcyB0aGF0IHdpbGwgbmF2aWdhdGUgdG8gaW5kZXgvP2NhdGVnb3J5PWlkKVxuICovXG5leHBvcnQgY29uc3QgU2lkZWJhcjogUmVhY3QuRkM8U2lkZWJhclByb3BzPiA9IHByb3BzID0+IHtcbiAgICBsZXQgdGhlbWUgPSB1c2VDb250ZXh0KFRoZW1lQ29udGV4dClcbiAgICBsZXQgbGlua3MgPSBwcm9wcy5jYXRlZ29yaWVzLm1hcChjYXRlZ29yeSA9PlxuICAgICAgICA8TmF2TGluayBcbiAgICAgICAgICAgIGtleT17Y2F0ZWdvcnkuaWR9XG4gICAgICAgICAgICBzZWxlY3RlZD17cHJvcHMucGF0aCA9PSBgLz9jYXRlZ29yeT0ke2NhdGVnb3J5LmlkfWB9IFxuICAgICAgICAgICAgbGFiZWw9e2NhdGVnb3J5Lm5hbWV9IFxuICAgICAgICAgICAgaHJlZj17YC8/Y2F0ZWdvcnk9JHtjYXRlZ29yeS5pZH1gfVxuICAgICAgICAgICAgdG9vbHRpcD17Y2F0ZWdvcnkuZGVzY3JpcHRpb259IFxuICAgICAgICAvPlxuICAgIClcbiAgICByZXR1cm4gPD5cbiAgICAgICAgPHN0eWxlIGpzeD57YFxuICAgICAgICAgICAgLm5hdmlnYXRpb24ge1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICAgICAgICAgICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAyMHB4IGF1dG87XG4gICAgICAgICAgICAgICAgbWFyZ2luOiAxMHB4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaGVhZGVyIHtcbiAgICAgICAgICAgICAgICB6LWluZGV4OiAyMDtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgICAgICAgICAgICAgd2lkdGg6IDI3MHB4O1xuICAgICAgICAgICAgICAgIGhlaWdodDogMTAwdmg7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHt0aGVtZS5oZWFkZXJDb2xvcn07XG4gICAgICAgICAgICAgICAgYm94LXNoYWRvdzogJHt0aGVtZS5zaGFkb3dDb2xvcn0gNXB4IDBweCA4cHg7XG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuMnMgMHMgZWFzZS1pbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGhlYWRlci5oaWRkZW4ge1xuICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtMjgwcHgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW1nIHtcbiAgICAgICAgICAgICAgICBtYXJnaW46IDUlO1xuICAgICAgICAgICAgICAgIG1hcmdpbi10b3A6IDQwcHg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIEBtZWRpYSAobWluLXdpZHRoOiA4MDBweCkge1xuICAgICAgICAgICAgICAgIGhlYWRlci5oaWRkZW4ge1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICBgfTwvc3R5bGU+XG4gICAgICAgIDxoZWFkZXIgY2xhc3NOYW1lPXsocHJvcHMuaGlkZGVuID8gXCIgaGlkZGVuXCIgOiBcIlwiKX0+XG4gICAgICAgICAgICA8aW1nIHNyYz1cInN0YXRpYy9hc3NldHMvU1ZHL3doaXRlLWxvZ28uc3ZnXCIgY2xhc3NOYW1lPVwibG9nb1wiIGFsdD1cIlNob3AgbG9nb1wiIC8+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm5hdmlnYXRpb25cIj5cbiAgICAgICAgICAgICAgICA8TmF2TGluayBzZWxlY3RlZD17cHJvcHMucGF0aCA9PSBcIi9cIn0gbGFiZWw9XCJBbGwgSXRlbXNcIiBocmVmPVwiL1wiIC8+XG4gICAgICAgICAgICAgICAge2xpbmtzfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvaGVhZGVyPlxuICAgIDwvPlxufVxuXG4vKipcbiAqIEp1c3QgYSBzaXRlIGZvb3RlclxuICovXG5leHBvcnQgY29uc3QgRm9vdGVyOiBSZWFjdC5GQyA9IHByb3BzID0+IHtcbiAgICBsZXQgdGhlbWUgPSB1c2VDb250ZXh0KFRoZW1lQ29udGV4dClcbiAgICBsZXQgbG9vayA9IHVzZUNvbnRleHQoTG9va0NvbnRleHQpXG4gICAgcmV0dXJuIDw+XG4gICAgICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgICAgICAgIGZvb3RlciB7XG4gICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHt0aGVtZS5mb290ZXJDb2xvcn07XG4gICAgICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAgICAgICAgIGJvdHRvbTogMDtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAke2xvb2suc21hbGxTaXplfXB4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLmxvZ28ge1xuICAgICAgICAgICAgICAgIG1hcmdpbjogMjBweDtcbiAgICAgICAgICAgICAgICBtYXJnaW4tdG9wOiA0MHB4O1xuICAgICAgICAgICAgICAgIGhlaWdodDogMTAwcHg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAudGV4dC10aGluIHtcbiAgICAgICAgICAgICAgICBjb2xvcjogJHt0aGVtZS5hbHRlcm5hdGVUZXh0U3ViY29sb3J9O1xuICAgICAgICAgICAgICAgIGZvbnQtZmFtaWx5OiAke2xvb2suZm9udH07XG4gICAgICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDMwMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC50ZXh0LWJvbGQge1xuICAgICAgICAgICAgICAgIGNvbG9yOiAke3RoZW1lLmFsdGVybmF0ZVRleHRDb2xvcn07XG4gICAgICAgICAgICAgICAgZm9udC1mYW1pbHk6ICR7bG9vay5mb250fTtcbiAgICAgICAgICAgICAgICBmb250LXdlaWdodDogNjUwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYSB7XG4gICAgICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLmNvcHlyaWdodCB7XG4gICAgICAgICAgICAgICAgY29sb3I6ICR7dGhlbWUuYWx0ZXJuYXRlVGV4dENvbG9yfTtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICAgICAgYm90dG9tOiAwO1xuICAgICAgICAgICAgICAgIHJpZ2h0OiAwO1xuICAgICAgICAgICAgICAgIG1hcmdpbjogNXB4O1xuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogJHtsb29rLnN1YlNtYWxsU2l6ZX1weDtcbiAgICAgICAgICAgICAgICBmb250LWZhbWlseTogJHtsb29rLmZvbnR9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLmZvb3Rlci10ZXh0Ym94IHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgICAgICAgICAgbWFyZ2luOiAyMHB4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLmZvb3Rlci1jb250YWN0IHtcbiAgICAgICAgICAgICAgICBmb250LXNpemU6ICR7bG9vay5zbWFsbFNpemV9cHg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAuc3BhY2Uge1xuICAgICAgICAgICAgICAgIG1hcmdpbi10b3A6IDFlbTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIEBtZWRpYSAobWF4LXdpZHRoOiA3MDBweCkge1xuICAgICAgICAgICAgICAgIGZvb3RlciB7XG4gICAgICAgICAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICBgfTwvc3R5bGU+XG4gICAgICAgIDxmb290ZXI+XG4gICAgICAgICAgICA8aW1nIHNyYz1cInN0YXRpYy9hc3NldHMvU1ZHL3doaXRlLWxvZ28uc3ZnXCIgY2xhc3NOYW1lPVwibG9nb1wiIGFsdD1cIlNob3AgbG9nb1wiIC8+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZvb3Rlci10ZXh0Ym94XCI+XG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwidGV4dC10aGluXCI+RGVzaWduZWQgYW5kIGRldmVsb3BlZCBieTwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0ZXh0LWJvbGRcIj5QZXRyeWsgWWFyb3NsYXY8L3NwYW4+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZm9vdGVyLWNvbnRhY3RcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZvb3Rlci10ZXh0Ym94XCI+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInRleHQtdGhpblwiPkVtYWlsPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0ZXh0LWJvbGRcIj48YSBocmVmPVwibWFpbHRvOnlhcm9zbGF2LnBldHJ5a0B1a21hLmVkdS51YVwiPnlhcm9zbGF2LnBldHJ5a0B1a21hLmVkdS51YTwvYT48L3NwYW4+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmb290ZXItdGV4dGJveFwiPlxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0ZXh0LXRoaW5cIj5QZXJzb25hbCB3ZWJzaXRlPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0ZXh0LWJvbGRcIj5TaG91bGQgSSBoYXZlIG9uZT88L3NwYW4+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3BhY2VcIiAvPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiY29weXJpZ2h0IFwiPsKpIFBldHJ5ayBZYXJvc2xhdi4gMjAxOS4gSWNvbiBtYWRlIGZyb20gPGEgaHJlZj1cImh0dHA6Ly93d3cub25saW5ld2ViZm9udHMuY29tL2ljb25cIj5JY29uIEZvbnRzPC9hPiBpcyBsaWNlbnNlZCBieSBDQyBCWSAzLjA8L3NwYW4+XG4gICAgICAgIDwvZm9vdGVyPlxuICAgIDwvPlxufVxuXG5pbnRlcmZhY2UgQXBwRnJhbWVQcm9wcyB7XG4gICAgcGF0aD86IHN0cmluZztcbiAgICBuYW1lPzogc3RyaW5nO1xuICAgIGNhdGVnb3JpZXM6IFRyb25DYXRlZ29yeVtdO1xufVxuLyoqXG4gKiBNYWluIGNvbXBvbmVudCB0aGF0IGlzIHJlc3BvbnNpYmxlIG9mIGNvbW1vbiB0aGluZ3MsIHN1Y2ggYXMgaGVhZGVycywgZm9vdGVyLCBjYXJ0IGFuZCBtZXNzYWdlIGhhbmRsaW5nLCBhbmQgb3RoZXIgY29tbW9uIHN0dWZmIGJldHdlZW4gdGhlIHBhZ2VzXG4gKiBAcGFyYW0gcGF0aCBvcHRpb25hbCAtLSB1c2VkIHRvIGhpZ2hsaWdodCBjdXJyZW50IHBhdGggbGluayBpbiB0aGUgc2lkZWJhclxuICogQHBhcmFtIG5hbWUgdXNlZCB0byBkaXNwbGF5IGluIHRoZSBkb2N1bWVudCB0aXRsZSBhcyB3ZWxsIGFzIGluIHRoZSBtb2JpbGUgbmVhZGVyIEBkZWZhdWx0IFwiRmFzdCBTaG9wXCJcbiAqIEBwYXJhbSBjYXRlZ29yaWVzIHRoYXQgYXJlIHByb2JhYmx5IGZldGNoZWQgZnJvbSB0aGUgc2VydmVyLCB1c2VkIHRvIGRpc3BsYXkgdGhlbSBpbiB0aGUgc2lkZWJhclxuICovXG5leHBvcnQgY29uc3QgQXBwRnJhbWU6IFJlYWN0LkZDPEFwcEZyYW1lUHJvcHM+ID0gcHJvcHMgPT4ge1xuICAgIGxldCBbdGhlbWUsIHNldFRoZW1lXSA9IHVzZVN0YXRlKExpZ2h0KVxuICAgIGxldCB7IHdpZHRoIH0gPSB1c2VXaW5kb3dCb3VuZHMoKVxuICAgIGxldCBbbW9iaWxlLCBzZXRNb2JpbGVdID0gdXNlU3RhdGUoKHdpZHRoKSA/IHdpZHRoIDwgODAwIDogdHJ1ZSk7XG4gICAgbGV0IFtzaWRlYmFyU2hvd24sIHNldFNpZGViYXJTaG93bl0gPSB1c2VTdGF0ZSghbW9iaWxlKVxuICAgIGxldCBkaW1taW5nUmVmID0gdXNlUmVmPEhUTUxEaXZFbGVtZW50PihudWxsKVxuICAgIHVzZUNsaWNrKGRpbW1pbmdSZWYsICgpID0+IHtcbiAgICAgICAgaWYgKHNpZGViYXJTaG93bikgc2V0U2lkZWJhclNob3duKGZhbHNlKVxuICAgIH0sIFtzaWRlYmFyU2hvd24sIG1vYmlsZV0pXG4gICAgdXNlS2V5RG93bigoZSkgPT4ge1xuICAgICAgICBpZiAobW9iaWxlICYmIHNpZGViYXJTaG93biAmJiBlLmtleSA9PSBcIkVzY2FwZVwiKSBzZXRTaWRlYmFyU2hvd24oZmFsc2UpXG4gICAgfSwgW3NpZGViYXJTaG93biwgbW9iaWxlXSlcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIHNldE1vYmlsZSgod2lkdGgpID8gd2lkdGggPCA4MDAgOiB0cnVlKVxuICAgIH0sIFt3aWR0aF0pXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgbGV0IG1hdGNoID0gd2luZG93Lm1hdGNoTWVkaWEoXCIocHJlZmVycy1jb2xvci1zY2hlbWU6IGRhcmspXCIpLm1hdGNoZXNcbiAgICAgICAgc2V0VGhlbWUobWF0Y2ggPyBEYXJrIDogTGlnaHQpXG5cbiAgICAgICAgZnVuY3Rpb24gbWF0Y2hfZnVuYyh7IG1hdGNoZXMgfTogTWVkaWFRdWVyeUxpc3RFdmVudCkge1xuICAgICAgICAgICAgaWYgKG1hdGNoZXMpIHNldFRoZW1lKERhcmspXG4gICAgICAgICAgICBlbHNlIHNldFRoZW1lKExpZ2h0KVxuICAgICAgICB9XG4gICAgICAgIHdpbmRvdy5tYXRjaE1lZGlhKFwiKHByZWZlcnMtY29sb3Itc2NoZW1lOiBkYXJrKVwiKS5hZGRMaXN0ZW5lcihtYXRjaF9mdW5jKVxuICAgICAgICByZXR1cm4gKCkgPT4gd2luZG93Lm1hdGNoTWVkaWEoXCIocHJlZmVycy1jb2xvci1zY2hlbWU6IGRhcmspXCIpLnJlbW92ZUxpc3RlbmVyKG1hdGNoX2Z1bmMpXG4gICAgfSwgW10pXG5cbiAgICBsZXQgW21zZywgZXJyTXNnRGlzcGF0Y2hdID0gdXNlTWVzc2FnZURpc3BhdGNoKClcblxuICAgIGxldCBbc2hvcHBpbmdDYXJ0SXRlbXMsIHNob3BwaW5nRGlzcGF0Y2hdID0gdXNlU2hvcHBpbmdDYXJ0KClcblxuICAgIHJldHVybiA8PlxuICAgICAgICA8bGluayBocmVmPVwiaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PUxpYnJlK0Jhc2tlcnZpbGxlOjcwMCZkaXNwbGF5PXN3YXBcIiByZWw9XCJzdHlsZXNoZWV0XCIgLz5cbiAgICAgICAgPFRoZW1lQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17dGhlbWV9PlxuICAgICAgICAgICAgPFN0ZEVyckNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e2Vyck1zZ0Rpc3BhdGNofT5cbiAgICAgICAgICAgICAgICA8c3R5bGUgZ2xvYmFsIGpzeD57YFxuICAgICAgICAgICAgICAgICAgICBib2R5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke3RoZW1lLmJhY2tncm91bmRDb2xvcn07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogaW5oZXJpdDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGB9PC9zdHlsZT5cbiAgICAgICAgICAgICAgICA8c3R5bGUganN4PntgXG4gICAgICAgICAgICAgICAgICAgIC5hcHAge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAuY29udGVudCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbi1oZWlnaHQ6IDEwMHZoO1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3cteDogaGlkZGVuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC5zaWRlYmFyIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMjUwcHg7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLmRpbW1lciB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTAwdnc7XG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMHZoO1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGZpeGVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7dGhlbWUuZGltbWluZ0NvbG9yfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICB6LWluZGV4OiAxNTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IG9wYWNpdHkgMC4ycyAwcyBlYXNlLWluO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC5kaW1tZXIuaGlkZGVuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB6LWluZGV4OiAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC5zcGFjZXIge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAyNzBweDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGB9PC9zdHlsZT5cbiAgICAgICAgICAgICAgICA8SGVhZD5cbiAgICAgICAgICAgICAgICAgICAgPHRpdGxlPntcIkZhc3QgU2hvcFwiICsgKHByb3BzLm5hbWUgPyBgOiAke3Byb3BzLm5hbWV9YCA6IFwiXCIpfTwvdGl0bGU+XG4gICAgICAgICAgICAgICAgPC9IZWFkPlxuICAgICAgICAgICAgICAgIDxFcnJvck1zZyBtc2c9e21zZ30gLz5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFwcFwiPlxuICAgICAgICAgICAgICAgICAgICA8U2lkZWJhciBwYXRoPXtwcm9wcy5wYXRofSBoaWRkZW49eyFzaWRlYmFyU2hvd259IGNhdGVnb3JpZXM9e3Byb3BzLmNhdGVnb3JpZXN9IC8+XG4gICAgICAgICAgICAgICAgICAgIHshbW9iaWxlID8gPGRpdiBjbGFzc05hbWU9XCJzcGFjZXJcIiAvPiA6IHVuZGVmaW5lZH1cbiAgICAgICAgICAgICAgICAgICAgPE5vU1NSPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250ZW50XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge21vYmlsZSAmJiA8PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHJlZj17ZGltbWluZ1JlZn0gY2xhc3NOYW1lPXtcImRpbW1lclwiICsgKHNpZGViYXJTaG93biA/IFwiXCIgOiBcIiBoaWRkZW5cIil9IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxNb2JpbGVIZWFkZXIgdGl0bGU9e3Byb3BzLm5hbWUgfHwgXCJGYXN0IHNob3BcIn0gb25IYW1idXJnZXI9eygpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFNpZGViYXJTaG93bighc2lkZWJhclNob3duKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U2hvcHBpbmdDYXJ0Q29udGV4dC5Qcm92aWRlciB2YWx1ZT17c2hvcHBpbmdEaXNwYXRjaH0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtwcm9wcy5jaGlsZHJlbn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNob3BwaW5nQ2FydCB7Li4uc2hvcHBpbmdDYXJ0SXRlbXN9IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9TaG9wcGluZ0NhcnRDb250ZXh0LlByb3ZpZGVyPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxWU3BhY2VkIHN0eWxlPXt7IGJvdHRvbTogMCwgd2lkdGg6IFwiMTAwJVwiIH19PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Rm9vdGVyIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9WU3BhY2VkPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvTm9TU1I+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L1N0ZEVyckNvbnRleHQuUHJvdmlkZXI+XG4gICAgICAgIDwvVGhlbWVDb250ZXh0LlByb3ZpZGVyPlxuICAgIDwvPlxufVxuXG5pbnRlcmZhY2UgU3RvcmVmcm9udFByb3BzIHtcbiAgICBzZWN0aW9ucz86IFNlY3Rpb25Qcm9wc1tdO1xuICAgIGl0ZW1zPzogU3RvcmVJdGVtW107XG59XG4vKipcbiAqIFVzZWQgdG8gZGlzcGxheSBhbmQgb3JnYW5pemUgaXRlbSBzZWN0aW9ucy4gRm9ybWVybHkgcmVzcG9uc2libGUgZm9yIHNob3BwaW5nIGNhcnQgY29udGV4dCBtYWFuZ2VtZW50XG4gKiBAcGFyYW0gaXRlbXMgdGhlIHRvcCBzZWN0aW9uIHdpdGggbm8gdGl0bGVcbiAqIEBwYXJhbSBzZWN0aW9ucyBvdGhlciBzZWN0aW9ucyB3aXRoIGFkZGl0aW9uYWwgcHJvcHNcbiAqL1xuZXhwb3J0IGNvbnN0IFN0b3JlZnJvbnQ6IFJlYWN0LkZDPFN0b3JlZnJvbnRQcm9wcz4gPSBwcm9wcyA9PiB7XG4gICAgbGV0IGRpc3BhdGNoID0gdXNlQ29udGV4dChTaG9wcGluZ0NhcnRDb250ZXh0KVxuXG4gICAgY29uc3QgYnV5SGFuZGxlciA9IChpdGVtOiBTdG9yZUl0ZW0pID0+IHtcbiAgICAgICAgaWYgKGRpc3BhdGNoKSBkaXNwYXRjaCh7IHR5cGU6IFNDQWN0aW9uVHlwZS5hZGQsIGlkOiBpdGVtLmlkLCBjb3VudDogMSwgZmFsbGJhY2tJdGVtOiBpdGVtIH0pXG4gICAgfVxuICAgIGxldCBzZWN0aW9uczogSlNYLkVsZW1lbnRbXSA9IFtdXG4gICAgaWYgKHByb3BzLml0ZW1zKSB7XG4gICAgICAgIHNlY3Rpb25zLnB1c2goPFNlY3Rpb24gaXRlbXM9e3Byb3BzLml0ZW1zfSBrZXk9ey0xfSBvbkJ1eT17YnV5SGFuZGxlcn0gLz4pXG4gICAgfVxuICAgIGlmIChwcm9wcy5zZWN0aW9ucykge1xuICAgICAgICBzZWN0aW9ucy5wdXNoKC4uLnByb3BzLnNlY3Rpb25zLm1hcCgoc3Byb3BzLCBpbmRleCkgPT4gPFNlY3Rpb24gey4uLnNwcm9wc30ga2V5PXtpbmRleH0gb25CdXk9e2J1eUhhbmRsZXJ9IC8+KSlcbiAgICB9XG4gICAgcmV0dXJuIDw+e3NlY3Rpb25zfTwvPlxufSJdfQ== */\n/*@ sourceURL=/Users/yaroslav/Developer/Study/NIT/LabNext/src/components/common.tsx */")), __jsx(next_link__WEBPACK_IMPORTED_MODULE_5___default.a, {
    href: props.href,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 139
    },
    __self: this
  }, __jsx("a", {
    title: props.tooltip,
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["1591376557", [theme.alternateTextColor, look.font, props.selected ? look.largeSize : look.mediumSize, props.selected ? 800 : 400]]]),
    __source: {
      fileName: _jsxFileName,
      lineNumber: 140
    },
    __self: this
  }, __jsx("div", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["1591376557", [theme.alternateTextColor, look.font, props.selected ? look.largeSize : look.mediumSize, props.selected ? 800 : 400]]]),
    __source: {
      fileName: _jsxFileName,
      lineNumber: 141
    },
    __self: this
  }, props.thumb), __jsx("span", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["1591376557", [theme.alternateTextColor, look.font, props.selected ? look.largeSize : look.mediumSize, props.selected ? 800 : 400]]]),
    __source: {
      fileName: _jsxFileName,
      lineNumber: 142
    },
    __self: this
  }, props.label))));
};

/**
 * Sidebar that contains Navigation 'n stuff
 * @param path optional -- current page path (without querry)
 * @param hidden whether hidden or not (for mobile use)
 * @param categories categories of products (will generate links that will navigate to index/?category=id)
 */
var Sidebar = function Sidebar(props) {
  var theme = Object(react__WEBPACK_IMPORTED_MODULE_6__["useContext"])(_style__WEBPACK_IMPORTED_MODULE_11__["ThemeContext"]);
  var links = props.categories.map(function (category) {
    return __jsx(NavLink, {
      key: category.id,
      selected: props.path == "/?category=".concat(category.id),
      label: category.name,
      href: "/?category=".concat(category.id),
      tooltip: category.description,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 162
      },
      __self: this
    });
  });
  return __jsx(react__WEBPACK_IMPORTED_MODULE_6___default.a.Fragment, null, __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a, {
    id: "1680629883",
    dynamic: [theme.headerColor, theme.shadowColor],
    __self: this
  }, ".navigation.__jsx-style-dynamic-selector{display:grid;grid-template-columns:20px auto;margin:10px;}header.__jsx-style-dynamic-selector{z-index:20;position:fixed;width:270px;height:100vh;background-color:".concat(theme.headerColor, ";box-shadow:").concat(theme.shadowColor, " 5px 0px 8px;-webkit-transition:-webkit-transform 0.2s 0s ease-in;-webkit-transition:transform 0.2s 0s ease-in;transition:transform 0.2s 0s ease-in;}header.hidden.__jsx-style-dynamic-selector{-webkit-transform:translateX(-280px);-ms-transform:translateX(-280px);transform:translateX(-280px);}img.__jsx-style-dynamic-selector{margin:5%;margin-top:40px;}@media (min-width:800px){header.hidden.__jsx-style-dynamic-selector{-webkit-transform:translateX(0);-ms-transform:translateX(0);transform:translateX(0);}}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/Users/yaroslav/Developer/Study/NIT/LabNext/src/components/common.tsx */")), __jsx("header", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["1680629883", [theme.headerColor, theme.shadowColor]]]) + " " + ((props.hidden ? " hidden" : "") || ""),
    __source: {
      fileName: _jsxFileName,
      lineNumber: 200
    },
    __self: this
  }, __jsx("img", {
    src: "static/assets/SVG/white-logo.svg",
    alt: "Shop logo",
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["1680629883", [theme.headerColor, theme.shadowColor]]]) + " " + "logo",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 201
    },
    __self: this
  }), __jsx("div", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["1680629883", [theme.headerColor, theme.shadowColor]]]) + " " + "navigation",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 202
    },
    __self: this
  }, __jsx(NavLink, {
    selected: props.path == "/",
    label: "All Items",
    href: "/",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 203
    },
    __self: this
  }), links)));
};
/**
 * Just a site footer
 */

var Footer = function Footer(props) {
  var theme = Object(react__WEBPACK_IMPORTED_MODULE_6__["useContext"])(_style__WEBPACK_IMPORTED_MODULE_11__["ThemeContext"]);
  var look = Object(react__WEBPACK_IMPORTED_MODULE_6__["useContext"])(_style__WEBPACK_IMPORTED_MODULE_11__["LookContext"]);
  return __jsx(react__WEBPACK_IMPORTED_MODULE_6___default.a.Fragment, null, __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a, {
    id: "2867761583",
    dynamic: [theme.footerColor, look.smallSize, theme.alternateTextSubcolor, look.font, theme.alternateTextColor, look.font, theme.alternateTextColor, look.subSmallSize, look.font, look.smallSize],
    __self: this
  }, "footer.__jsx-style-dynamic-selector{width:100%;background-color:".concat(theme.footerColor, ";position:relative;bottom:0;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;font-size:").concat(look.smallSize, "px;}.logo.__jsx-style-dynamic-selector{margin:20px;margin-top:40px;height:100px;}.text-thin.__jsx-style-dynamic-selector{color:").concat(theme.alternateTextSubcolor, ";font-family:").concat(look.font, ";font-weight:300;}.text-bold.__jsx-style-dynamic-selector{color:").concat(theme.alternateTextColor, ";font-family:").concat(look.font, ";font-weight:650;}a.__jsx-style-dynamic-selector{-webkit-text-decoration:none;text-decoration:none;}.copyright.__jsx-style-dynamic-selector{color:").concat(theme.alternateTextColor, ";position:absolute;bottom:0;right:0;margin:5px;font-size:").concat(look.subSmallSize, "px;font-family:").concat(look.font, ";}.footer-textbox.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;margin:20px;}.footer-contact.__jsx-style-dynamic-selector{font-size:").concat(look.smallSize, "px;}.space.__jsx-style-dynamic-selector{margin-top:1em;}@media (max-width:700px){footer.__jsx-style-dynamic-selector{-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;}}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/Users/yaroslav/Developer/Study/NIT/LabNext/src/components/common.tsx */")), __jsx("footer", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["2867761583", [theme.footerColor, look.smallSize, theme.alternateTextSubcolor, look.font, theme.alternateTextColor, look.font, theme.alternateTextColor, look.subSmallSize, look.font, look.smallSize]]]),
    __source: {
      fileName: _jsxFileName,
      lineNumber: 271
    },
    __self: this
  }, __jsx("img", {
    src: "static/assets/SVG/white-logo.svg",
    alt: "Shop logo",
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["2867761583", [theme.footerColor, look.smallSize, theme.alternateTextSubcolor, look.font, theme.alternateTextColor, look.font, theme.alternateTextColor, look.subSmallSize, look.font, look.smallSize]]]) + " " + "logo",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 272
    },
    __self: this
  }), __jsx("div", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["2867761583", [theme.footerColor, look.smallSize, theme.alternateTextSubcolor, look.font, theme.alternateTextColor, look.font, theme.alternateTextColor, look.subSmallSize, look.font, look.smallSize]]]) + " " + "footer-textbox",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 273
    },
    __self: this
  }, __jsx("span", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["2867761583", [theme.footerColor, look.smallSize, theme.alternateTextSubcolor, look.font, theme.alternateTextColor, look.font, theme.alternateTextColor, look.subSmallSize, look.font, look.smallSize]]]) + " " + "text-thin",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 274
    },
    __self: this
  }, "Designed and developed by"), __jsx("span", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["2867761583", [theme.footerColor, look.smallSize, theme.alternateTextSubcolor, look.font, theme.alternateTextColor, look.font, theme.alternateTextColor, look.subSmallSize, look.font, look.smallSize]]]) + " " + "text-bold",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 275
    },
    __self: this
  }, "Petryk Yaroslav")), __jsx("div", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["2867761583", [theme.footerColor, look.smallSize, theme.alternateTextSubcolor, look.font, theme.alternateTextColor, look.font, theme.alternateTextColor, look.subSmallSize, look.font, look.smallSize]]]) + " " + "footer-contact",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 277
    },
    __self: this
  }, __jsx("div", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["2867761583", [theme.footerColor, look.smallSize, theme.alternateTextSubcolor, look.font, theme.alternateTextColor, look.font, theme.alternateTextColor, look.subSmallSize, look.font, look.smallSize]]]) + " " + "footer-textbox",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 278
    },
    __self: this
  }, __jsx("span", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["2867761583", [theme.footerColor, look.smallSize, theme.alternateTextSubcolor, look.font, theme.alternateTextColor, look.font, theme.alternateTextColor, look.subSmallSize, look.font, look.smallSize]]]) + " " + "text-thin",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 279
    },
    __self: this
  }, "Email"), __jsx("span", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["2867761583", [theme.footerColor, look.smallSize, theme.alternateTextSubcolor, look.font, theme.alternateTextColor, look.font, theme.alternateTextColor, look.subSmallSize, look.font, look.smallSize]]]) + " " + "text-bold",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 280
    },
    __self: this
  }, __jsx("a", {
    href: "mailto:yaroslav.petryk@ukma.edu.ua",
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["2867761583", [theme.footerColor, look.smallSize, theme.alternateTextSubcolor, look.font, theme.alternateTextColor, look.font, theme.alternateTextColor, look.subSmallSize, look.font, look.smallSize]]]),
    __source: {
      fileName: _jsxFileName,
      lineNumber: 280
    },
    __self: this
  }, "yaroslav.petryk@ukma.edu.ua"))), __jsx("div", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["2867761583", [theme.footerColor, look.smallSize, theme.alternateTextSubcolor, look.font, theme.alternateTextColor, look.font, theme.alternateTextColor, look.subSmallSize, look.font, look.smallSize]]]) + " " + "footer-textbox",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 282
    },
    __self: this
  }, __jsx("span", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["2867761583", [theme.footerColor, look.smallSize, theme.alternateTextSubcolor, look.font, theme.alternateTextColor, look.font, theme.alternateTextColor, look.subSmallSize, look.font, look.smallSize]]]) + " " + "text-thin",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 283
    },
    __self: this
  }, "Personal website"), __jsx("span", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["2867761583", [theme.footerColor, look.smallSize, theme.alternateTextSubcolor, look.font, theme.alternateTextColor, look.font, theme.alternateTextColor, look.subSmallSize, look.font, look.smallSize]]]) + " " + "text-bold",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 284
    },
    __self: this
  }, "Should I have one?"))), __jsx("div", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["2867761583", [theme.footerColor, look.smallSize, theme.alternateTextSubcolor, look.font, theme.alternateTextColor, look.font, theme.alternateTextColor, look.subSmallSize, look.font, look.smallSize]]]) + " " + "space",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 287
    },
    __self: this
  }), __jsx("span", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["2867761583", [theme.footerColor, look.smallSize, theme.alternateTextSubcolor, look.font, theme.alternateTextColor, look.font, theme.alternateTextColor, look.subSmallSize, look.font, look.smallSize]]]) + " " + "copyright ",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 288
    },
    __self: this
  }, "\xA9 Petryk Yaroslav. 2019. Icon made from ", __jsx("a", {
    href: "http://www.onlinewebfonts.com/icon",
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["2867761583", [theme.footerColor, look.smallSize, theme.alternateTextSubcolor, look.font, theme.alternateTextColor, look.font, theme.alternateTextColor, look.subSmallSize, look.font, look.smallSize]]]),
    __source: {
      fileName: _jsxFileName,
      lineNumber: 288
    },
    __self: this
  }, "Icon Fonts"), " is licensed by CC BY 3.0")));
};

/**
 * Main component that is responsible of common things, such as headers, footer, cart and message handling, and other common stuff between the pages
 * @param path optional -- used to highlight current path link in the sidebar
 * @param name used to display in the document title as well as in the mobile neader @default "Fast Shop"
 * @param categories that are probably fetched from the server, used to display them in the sidebar
 */
var AppFrame = function AppFrame(props) {
  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_6__["useState"])(_style__WEBPACK_IMPORTED_MODULE_11__["Light"]),
      theme = _useState[0],
      setTheme = _useState[1];

  var _useWindowBounds = Object(_hooks__WEBPACK_IMPORTED_MODULE_7__["useWindowBounds"])(),
      width = _useWindowBounds.width;

  var _useState2 = Object(react__WEBPACK_IMPORTED_MODULE_6__["useState"])(width ? width < 800 : true),
      mobile = _useState2[0],
      setMobile = _useState2[1];

  var _useState3 = Object(react__WEBPACK_IMPORTED_MODULE_6__["useState"])(!mobile),
      sidebarShown = _useState3[0],
      setSidebarShown = _useState3[1];

  var dimmingRef = Object(react__WEBPACK_IMPORTED_MODULE_6__["useRef"])(null);
  Object(_hooks__WEBPACK_IMPORTED_MODULE_7__["useClick"])(dimmingRef, function () {
    if (sidebarShown) setSidebarShown(false);
  }, [sidebarShown, mobile]);
  Object(_hooks__WEBPACK_IMPORTED_MODULE_7__["useKeyDown"])(function (e) {
    if (mobile && sidebarShown && e.key == "Escape") setSidebarShown(false);
  }, [sidebarShown, mobile]);
  Object(react__WEBPACK_IMPORTED_MODULE_6__["useEffect"])(function () {
    setMobile(width ? width < 800 : true);
  }, [width]);
  Object(react__WEBPACK_IMPORTED_MODULE_6__["useEffect"])(function () {
    var match = window.matchMedia("(prefers-color-scheme: dark)").matches;
    setTheme(match ? _style__WEBPACK_IMPORTED_MODULE_11__["Dark"] : _style__WEBPACK_IMPORTED_MODULE_11__["Light"]);

    function match_func(_ref) {
      var matches = _ref.matches;
      if (matches) setTheme(_style__WEBPACK_IMPORTED_MODULE_11__["Dark"]);else setTheme(_style__WEBPACK_IMPORTED_MODULE_11__["Light"]);
    }

    window.matchMedia("(prefers-color-scheme: dark)").addListener(match_func);
    return function () {
      return window.matchMedia("(prefers-color-scheme: dark)").removeListener(match_func);
    };
  }, []);

  var _useMessageDispatch = Object(_errors__WEBPACK_IMPORTED_MODULE_12__["useMessageDispatch"])(),
      _useMessageDispatch2 = Object(_babel_runtime_corejs2_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__["default"])(_useMessageDispatch, 2),
      msg = _useMessageDispatch2[0],
      errMsgDispatch = _useMessageDispatch2[1];

  var _useShoppingCart = Object(_shopping__WEBPACK_IMPORTED_MODULE_10__["useShoppingCart"])(),
      _useShoppingCart2 = Object(_babel_runtime_corejs2_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__["default"])(_useShoppingCart, 2),
      shoppingCartItems = _useShoppingCart2[0],
      shoppingDispatch = _useShoppingCart2[1];

  return __jsx(react__WEBPACK_IMPORTED_MODULE_6___default.a.Fragment, null, __jsx("link", {
    href: "https://fonts.googleapis.com/css?family=Libre+Baskerville:700&display=swap",
    rel: "stylesheet",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 337
    },
    __self: this
  }), __jsx(_style__WEBPACK_IMPORTED_MODULE_11__["ThemeContext"].Provider, {
    value: theme,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 338
    },
    __self: this
  }, __jsx(_errors__WEBPACK_IMPORTED_MODULE_12__["StdErrContext"].Provider, {
    value: errMsgDispatch,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 339
    },
    __self: this
  }, __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a, {
    id: "2720438309",
    dynamic: [theme.backgroundColor],
    __self: this
  }, "body{margin:0;padding:0;background-color:".concat(theme.backgroundColor, ";}a{color:inherit;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/Users/yaroslav/Developer/Study/NIT/LabNext/src/components/common.tsx */")), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a, {
    id: "1291953896",
    dynamic: [theme.dimmingColor],
    __self: this
  }, ".app.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;position:relative;}.content.__jsx-style-dynamic-selector{width:100%;min-height:100vh;position:relative;overflow-x:hidden;}.sidebar.__jsx-style-dynamic-selector{margin-right:250px;}.dimmer.__jsx-style-dynamic-selector{width:100vw;height:100vh;position:fixed;top:0;left:0;background-color:".concat(theme.dimmingColor, ";opacity:1;z-index:15;-webkit-transition:opacity 0.2s 0s ease-in;transition:opacity 0.2s 0s ease-in;}.dimmer.hidden.__jsx-style-dynamic-selector{opacity:0;z-index:0;}.spacer.__jsx-style-dynamic-selector{margin-right:270px;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/Users/yaroslav/Developer/Study/NIT/LabNext/src/components/common.tsx */")), __jsx(next_head__WEBPACK_IMPORTED_MODULE_4___default.a, {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 383
    },
    __self: this
  }, __jsx("title", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["2720438309", [theme.backgroundColor]], ["1291953896", [theme.dimmingColor]]]),
    __source: {
      fileName: _jsxFileName,
      lineNumber: 384
    },
    __self: this
  }, "Fast Shop" + (props.name ? ": ".concat(props.name) : ""))), __jsx(_errors__WEBPACK_IMPORTED_MODULE_12__["ErrorMsg"], {
    msg: msg,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 386
    },
    __self: this
  }), __jsx("div", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["2720438309", [theme.backgroundColor]], ["1291953896", [theme.dimmingColor]]]) + " " + "app",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 387
    },
    __self: this
  }, __jsx(Sidebar, {
    path: props.path,
    hidden: !sidebarShown,
    categories: props.categories,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 388
    },
    __self: this
  }), !mobile ? __jsx("div", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["2720438309", [theme.backgroundColor]], ["1291953896", [theme.dimmingColor]]]) + " " + "spacer",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 389
    },
    __self: this
  }) : undefined, __jsx(_layout__WEBPACK_IMPORTED_MODULE_8__["NoSSR"], {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 390
    },
    __self: this
  }, __jsx("div", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["2720438309", [theme.backgroundColor]], ["1291953896", [theme.dimmingColor]]]) + " " + "content",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 391
    },
    __self: this
  }, mobile && __jsx(react__WEBPACK_IMPORTED_MODULE_6___default.a.Fragment, null, __jsx("div", {
    ref: dimmingRef,
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["2720438309", [theme.backgroundColor]], ["1291953896", [theme.dimmingColor]]]) + " " + ("dimmer" + (sidebarShown ? "" : " hidden") || false),
    __source: {
      fileName: _jsxFileName,
      lineNumber: 393
    },
    __self: this
  }), __jsx(MobileHeader, {
    title: props.name || "Fast shop",
    onHamburger: function onHamburger() {
      setSidebarShown(!sidebarShown);
    },
    __source: {
      fileName: _jsxFileName,
      lineNumber: 394
    },
    __self: this
  })), __jsx(_shopping__WEBPACK_IMPORTED_MODULE_10__["ShoppingCartContext"].Provider, {
    value: shoppingDispatch,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 399
    },
    __self: this
  }, props.children, __jsx(_shopping__WEBPACK_IMPORTED_MODULE_10__["ShoppingCart"], Object(_babel_runtime_corejs2_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__["default"])({}, shoppingCartItems, {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 401
    },
    __self: this
  }))), __jsx(_layout__WEBPACK_IMPORTED_MODULE_8__["VSpaced"], {
    style: {
      bottom: 0,
      width: "100%"
    },
    __source: {
      fileName: _jsxFileName,
      lineNumber: 403
    },
    __self: this
  }, __jsx(Footer, {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 404
    },
    __self: this
  }))))))));
};

/**
 * Used to display and organize item sections. Formerly responsible for shopping cart context maangement
 * @param items the top section with no title
 * @param sections other sections with additional props
 */
var Storefront = function Storefront(props) {
  var dispatch = Object(react__WEBPACK_IMPORTED_MODULE_6__["useContext"])(_shopping__WEBPACK_IMPORTED_MODULE_10__["ShoppingCartContext"]);

  var buyHandler = function buyHandler(item) {
    if (dispatch) dispatch({
      type: _shopping__WEBPACK_IMPORTED_MODULE_10__["SCActionType"].add,
      id: item.id,
      count: 1,
      fallbackItem: item
    });
  };

  var sections = [];

  if (props.items) {
    sections.push(__jsx(_section__WEBPACK_IMPORTED_MODULE_9__["Section"], {
      items: props.items,
      key: -1,
      onBuy: buyHandler,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 431
      },
      __self: this
    }));
  }

  if (props.sections) {
    sections.push.apply(sections, Object(_babel_runtime_corejs2_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__["default"])(props.sections.map(function (sprops, index) {
      return __jsx(_section__WEBPACK_IMPORTED_MODULE_9__["Section"], Object(_babel_runtime_corejs2_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__["default"])({}, sprops, {
        key: index,
        onBuy: buyHandler,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 434
        },
        __self: this
      }));
    })));
  }

  return __jsx(react__WEBPACK_IMPORTED_MODULE_6___default.a.Fragment, null, sections);
};

/***/ })

})
//# sourceMappingURL=index.js.82e34d4d99ee5f6ce99b.hot-update.js.map
{"version":3,"file":"static/webpack/static/development/pages/index.js.82e34d4d99ee5f6ce99b.hot-update.js","sources":["webpack:///./src/components/common.tsx"],"sourcesContent":["import Head from \"next/head\";\nimport Link from \"next/link\";\nimport React, { useContext, useEffect, useRef, useState } from \"react\";\nimport { StoreItem, TronCategory } from \"../shared/components\";\nimport { useClick, useKeyDown, useMobileScroll, useWindowBounds } from \"./hooks\";\nimport { NoSSR, VSpaced } from \"./layout\";\nimport { Section, SectionProps } from \"./section\";\nimport { SCActionType, ShoppingCart, ShoppingCartContext, useShoppingCart } from \"./shopping\";\nimport { Dark, Light, LookContext, ThemeContext } from \"./style\";\nimport { useMessageDispatch, StdErrContext, ErrorMsg } from \"./errors\";\n\n//TODO: provide default image for product\nexport const defaultImage = \"\";\n\ninterface MobileHeaderProps {\n    onHamburger?: () => void;\n    title: string;\n    animated?: boolean;\n}\n/**\n * Header for mobile devices to invode sidebar\n * @param props title and hamburger menu click handler\n */\nexport const MobileHeader: React.FC<MobileHeaderProps> = props => {\n    let shown = useMobileScroll(true, 50)\n    let theme = useContext(ThemeContext)\n    let look = useContext(LookContext)\n    return <>\n        <style jsx>{`\n            header {\n                display: flex;\n                z-index: 10;\n                width: 100%;\n                height: 50px;\n                position: fixed;\n                top: 0;\n                /* left: 0; */\n                background-color: ${theme.mobileHeaderColor};\n                transition: transform 0.2s 0s ease-in;\n                border-bottom: solid 1px ${theme.alternateTextSubcolor};\n            }\n            header::before {\n                content: \"\";\n                position: absolute;\n                display: block;\n                height: 100%;\n                width: 100%;\n                box-shadow: ${theme.shadowColor} 0px 3px 10px 3px;\n            }\n            header.hidden {\n                transform: translateY(-50px);\n            }\n            button {\n                appearance: none;\n                position: relative;\n                border: none;\n                background: none;\n                padding: 0;\n                margin: 5px 10px;\n                width: 40px;\n                height: 40px;\n                display: block;\n                padding-right: 10px;\n                border-right: solid 2px ${theme.textSubcolor};\n            }\n            span {\n                font-family: ${look.font};\n                font-size: ${look.mediumSize}px;\n                color: ${theme.textColor};\n                line-height: 50px;\n                overflow: hidden;\n                text-overflow: ellipsis;\n            }\n            .spacer {\n                margin-top: 50px;\n            }\n            .line {\n                width: 100%;\n                height: 4px;\n                border-radius: 2px;\n                background-color: ${theme.textColor};\n                margin: 5px 0;\n                pointer-events: none;\n            }\n        `}</style>\n        <header className={shown ? \"\" : \"hidden\"}>\n            <button className={props.animated ? \"animated\" : \"\"} onClick={() => {\n                if (props.onHamburger) props.onHamburger()\n            }}>\n                <div className=\"line\" />\n                <div className=\"line\" />\n                <div className=\"line\" />\n            </button>\n            <span>{props.title}</span>\n        </header>\n        <div className=\"spacer\" />\n    </>\n}\n\ninterface NavLinkProps {\n    thumb?: JSX.Element;\n    label: string;\n    href: string;\n    selected?: boolean;\n    tooltip?: string;\n}\n/**\n * Sidebar link used to navigate between pages\n * @param props optional thumbnail, label, href, whether is selected and optional tooltip\n */\nexport const NavLink: React.FC<NavLinkProps> = props => {\n    let theme = useContext(ThemeContext)\n    let look = useContext(LookContext)\n    return <>\n        <style jsx>{`\n            a {\n                text-decoration: none;\n                display: contents;\n                padding: 10px 20px;\n            }\n            div {\n                grid-column: 1;\n                width: 100%;\n                display: flex;\n                justify-content: center;\n                align-items: center;\n            }\n            span {\n                text-overflow: ellipsis;\n                overflow: hidden;\n                grid-column: 2;\n                color: ${theme.alternateTextColor};\n                font-family: ${look.font};\n                font-size: ${props.selected ? look.largeSize : look.mediumSize}px;\n                font-weight: ${props.selected ? 800 : 400};\n                margin: 5px 0;\n            }\n        `}</style>\n        <Link href={props.href}>\n            <a title={props.tooltip}>\n                <div>{props.thumb}</div>\n                <span>{props.label}</span>\n            </a>\n        </Link>\n    </>\n}\n\ninterface SidebarProps {\n    path?: string;\n    hidden?: boolean;\n    categories: TronCategory[];\n}\n/**\n * Sidebar that contains Navigation 'n stuff\n * @param path optional -- current page path (without querry)\n * @param hidden whether hidden or not (for mobile use)\n * @param categories categories of products (will generate links that will navigate to index/?category=id)\n */\nexport const Sidebar: React.FC<SidebarProps> = props => {\n    let theme = useContext(ThemeContext)\n    let links = props.categories.map(category =>\n        <NavLink \n            key={category.id}\n            selected={props.path == `/?category=${category.id}`} \n            label={category.name} \n            href={`/?category=${category.id}`}\n            tooltip={category.description} \n        />\n    )\n    return <>\n        <style jsx>{`\n            .navigation {\n                display: grid;\n                grid-template-columns: 20px auto;\n                margin: 10px;\n            }\n            header {\n                z-index: 20;\n                position: fixed;\n                width: 270px;\n                height: 100vh;\n                background-color: ${theme.headerColor};\n                box-shadow: ${theme.shadowColor} 5px 0px 8px;\n                transition: transform 0.2s 0s ease-in;\n            }\n            header.hidden {\n                transform: translateX(-280px);\n            }\n            img {\n                margin: 5%;\n                margin-top: 40px;\n            }\n\n            @media (min-width: 800px) {\n                header.hidden {\n                    transform: translateX(0);\n                }\n            }\n        `}</style>\n        <header className={(props.hidden ? \" hidden\" : \"\")}>\n            <img src=\"static/assets/SVG/white-logo.svg\" className=\"logo\" alt=\"Shop logo\" />\n            <div className=\"navigation\">\n                <NavLink selected={props.path == \"/\"} label=\"All Items\" href=\"/\" />\n                {links}\n            </div>\n        </header>\n    </>\n}\n\n/**\n * Just a site footer\n */\nexport const Footer: React.FC = props => {\n    let theme = useContext(ThemeContext)\n    let look = useContext(LookContext)\n    return <>\n        <style jsx>{`\n            footer {\n                width: 100%;\n                background-color: ${theme.footerColor};\n                position: relative;\n                bottom: 0;\n                display: flex;\n                align-items: center;\n                font-size: ${look.smallSize}px;\n            }\n            .logo {\n                margin: 20px;\n                margin-top: 40px;\n                height: 100px;\n            }\n            .text-thin {\n                color: ${theme.alternateTextSubcolor};\n                font-family: ${look.font};\n                font-weight: 300;\n            }\n            .text-bold {\n                color: ${theme.alternateTextColor};\n                font-family: ${look.font};\n                font-weight: 650;\n            }\n            a {\n                text-decoration: none;\n            }\n            .copyright {\n                color: ${theme.alternateTextColor};\n                position: absolute;\n                bottom: 0;\n                right: 0;\n                margin: 5px;\n                font-size: ${look.subSmallSize}px;\n                font-family: ${look.font};\n            }\n            .footer-textbox {\n                display: flex;\n                flex-direction: column;\n                margin: 20px;\n            }\n            .footer-contact {\n                font-size: ${look.smallSize}px;\n            }\n            .space {\n                margin-top: 1em;\n            }\n            @media (max-width: 700px) {\n                footer {\n                    flex-direction: column;\n                }\n            }\n        `}</style>\n        <footer>\n            <img src=\"static/assets/SVG/white-logo.svg\" className=\"logo\" alt=\"Shop logo\" />\n            <div className=\"footer-textbox\">\n                <span className=\"text-thin\">Designed and developed by</span>\n                <span className=\"text-bold\">Petryk Yaroslav</span>\n            </div>\n            <div className=\"footer-contact\">\n                <div className=\"footer-textbox\">\n                    <span className=\"text-thin\">Email</span>\n                    <span className=\"text-bold\"><a href=\"mailto:yaroslav.petryk@ukma.edu.ua\">yaroslav.petryk@ukma.edu.ua</a></span>\n                </div>\n                <div className=\"footer-textbox\">\n                    <span className=\"text-thin\">Personal website</span>\n                    <span className=\"text-bold\">Should I have one?</span>\n                </div>\n            </div>\n            <div className=\"space\" />\n            <span className=\"copyright \">© Petryk Yaroslav. 2019. Icon made from <a href=\"http://www.onlinewebfonts.com/icon\">Icon Fonts</a> is licensed by CC BY 3.0</span>\n        </footer>\n    </>\n}\n\ninterface AppFrameProps {\n    path?: string;\n    name?: string;\n    categories: TronCategory[];\n}\n/**\n * Main component that is responsible of common things, such as headers, footer, cart and message handling, and other common stuff between the pages\n * @param path optional -- used to highlight current path link in the sidebar\n * @param name used to display in the document title as well as in the mobile neader @default \"Fast Shop\"\n * @param categories that are probably fetched from the server, used to display them in the sidebar\n */\nexport const AppFrame: React.FC<AppFrameProps> = props => {\n    let [theme, setTheme] = useState(Light)\n    let { width } = useWindowBounds()\n    let [mobile, setMobile] = useState((width) ? width < 800 : true);\n    let [sidebarShown, setSidebarShown] = useState(!mobile)\n    let dimmingRef = useRef<HTMLDivElement>(null)\n    useClick(dimmingRef, () => {\n        if (sidebarShown) setSidebarShown(false)\n    }, [sidebarShown, mobile])\n    useKeyDown((e) => {\n        if (mobile && sidebarShown && e.key == \"Escape\") setSidebarShown(false)\n    }, [sidebarShown, mobile])\n\n    useEffect(() => {\n        setMobile((width) ? width < 800 : true)\n    }, [width])\n    useEffect(() => {\n        let match = window.matchMedia(\"(prefers-color-scheme: dark)\").matches\n        setTheme(match ? Dark : Light)\n\n        function match_func({ matches }: MediaQueryListEvent) {\n            if (matches) setTheme(Dark)\n            else setTheme(Light)\n        }\n        window.matchMedia(\"(prefers-color-scheme: dark)\").addListener(match_func)\n        return () => window.matchMedia(\"(prefers-color-scheme: dark)\").removeListener(match_func)\n    }, [])\n\n    let [msg, errMsgDispatch] = useMessageDispatch()\n\n    let [shoppingCartItems, shoppingDispatch] = useShoppingCart()\n\n    return <>\n        <link href=\"https://fonts.googleapis.com/css?family=Libre+Baskerville:700&display=swap\" rel=\"stylesheet\" />\n        <ThemeContext.Provider value={theme}>\n            <StdErrContext.Provider value={errMsgDispatch}>\n                <style global jsx>{`\n                    body {\n                        margin: 0;\n                        padding: 0;\n                        background-color: ${theme.backgroundColor};\n                    }\n                    a {\n                        color: inherit;\n                    }\n                `}</style>\n                <style jsx>{`\n                    .app {\n                        display: flex;\n                        position: relative;\n                    }\n                    .content {\n                        width: 100%;\n                        min-height: 100vh;\n                        position: relative;\n                        overflow-x: hidden;\n                    }\n                    .sidebar {\n                        margin-right: 250px;\n                    }\n                    .dimmer {\n                        width: 100vw;\n                        height: 100vh;\n                        position: fixed;\n                        top: 0;\n                        left: 0;\n                        background-color: ${theme.dimmingColor};\n                        opacity: 1;\n                        z-index: 15;\n                        transition: opacity 0.2s 0s ease-in;\n                    }\n                    .dimmer.hidden {\n                        opacity: 0;\n                        z-index: 0;\n                    }\n                    .spacer {\n                        margin-right: 270px;\n                    }\n                `}</style>\n                <Head>\n                    <title>{\"Fast Shop\" + (props.name ? `: ${props.name}` : \"\")}</title>\n                </Head>\n                <ErrorMsg msg={msg} />\n                <div className=\"app\">\n                    <Sidebar path={props.path} hidden={!sidebarShown} categories={props.categories} />\n                    {!mobile ? <div className=\"spacer\" /> : undefined}\n                    <NoSSR>\n                        <div className=\"content\">\n                            {mobile && <>\n                                <div ref={dimmingRef} className={\"dimmer\" + (sidebarShown ? \"\" : \" hidden\")} />\n                                <MobileHeader title={props.name || \"Fast shop\"} onHamburger={() => {\n                                    setSidebarShown(!sidebarShown)\n                                }} />\n                            </>\n                            }\n                            <ShoppingCartContext.Provider value={shoppingDispatch}>\n                                {props.children}\n                                <ShoppingCart {...shoppingCartItems} />\n                            </ShoppingCartContext.Provider>\n                            <VSpaced style={{ bottom: 0, width: \"100%\" }}>\n                                <Footer />\n                            </VSpaced>\n                        </div>\n                    </NoSSR>\n                </div>\n            </StdErrContext.Provider>\n        </ThemeContext.Provider>\n    </>\n}\n\ninterface StorefrontProps {\n    sections?: SectionProps[];\n    items?: StoreItem[];\n}\n/**\n * Used to display and organize item sections. Formerly responsible for shopping cart context maangement\n * @param items the top section with no title\n * @param sections other sections with additional props\n */\nexport const Storefront: React.FC<StorefrontProps> = props => {\n    let dispatch = useContext(ShoppingCartContext)\n\n    const buyHandler = (item: StoreItem) => {\n        if (dispatch) dispatch({ type: SCActionType.add, id: item.id, count: 1, fallbackItem: item })\n    }\n    let sections: JSX.Element[] = []\n    if (props.items) {\n        sections.push(<Section items={props.items} key={-1} onBuy={buyHandler} />)\n    }\n    if (props.sections) {\n        sections.push(...props.sections.map((sprops, index) => <Section {...sprops} key={index} onBuy={buyHandler} />))\n    }\n    return <>{sections}</>\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;;;;AAIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AA0DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAQA;;;;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAyBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAMA;;;;;;AAMA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AASA;AAAA;AAAA;AAAA;AAAA;AA8BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAEA;;;;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAusourceRoot":""}
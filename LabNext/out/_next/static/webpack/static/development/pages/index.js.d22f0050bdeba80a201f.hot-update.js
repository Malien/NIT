webpackHotUpdate("static/development/pages/index.js",{

/***/ "./src/components/common.tsx":
/*!***********************************!*\
  !*** ./src/components/common.tsx ***!
  \***********************************/
/*! exports provided: defaultImage, MobileHeader, NavLink, Sidebar, Footer, AppFrame, Storefront, ErrorMsg */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultImage", function() { return defaultImage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MobileHeader", function() { return MobileHeader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NavLink", function() { return NavLink; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Sidebar", function() { return Sidebar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Footer", function() { return Footer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppFrame", function() { return AppFrame; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Storefront", function() { return Storefront; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ErrorMsg", function() { return ErrorMsg; });
/* harmony import */ var _babel_runtime_corejs2_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime-corejs2/helpers/esm/extends */ "./node_modules/@babel/runtime-corejs2/helpers/esm/extends.js");
/* harmony import */ var _babel_runtime_corejs2_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime-corejs2/helpers/esm/toConsumableArray */ "./node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray.js");
/* harmony import */ var _babel_runtime_corejs2_core_js_json_stringify__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime-corejs2/core-js/json/stringify */ "./node_modules/@babel/runtime-corejs2/core-js/json/stringify.js");
/* harmony import */ var _babel_runtime_corejs2_core_js_json_stringify__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_corejs2_core_js_json_stringify__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! styled-jsx/style */ "./node_modules/styled-jsx/style.js");
/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(styled_jsx_style__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/link */ "./node_modules/next/link.js");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/head */ "./node_modules/next/dist/next-server/lib/head.js");
/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_head__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _style__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./style */ "./src/components/style.ts");
/* harmony import */ var _layout__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./layout */ "./src/components/layout.tsx");
/* harmony import */ var _section__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./section */ "./src/components/section.tsx");
/* harmony import */ var _shopping__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./shopping */ "./src/components/shopping.tsx");
/* harmony import */ var _hooks__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./hooks */ "./src/components/hooks.ts");



var _jsxFileName = "/Users/yaroslav/Developer/Study/NIT/LabNext/src/components/common.tsx";

var __jsx = react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement;







 //TODO: provide default image for product

var defaultImage = "";
var MobileHeader = function MobileHeader(props) {
  var shown = Object(_hooks__WEBPACK_IMPORTED_MODULE_11__["useMobileScroll"])(true, 50);
  var theme = Object(react__WEBPACK_IMPORTED_MODULE_4__["useContext"])(_style__WEBPACK_IMPORTED_MODULE_7__["ThemeContext"]);
  var look = Object(react__WEBPACK_IMPORTED_MODULE_4__["useContext"])(_style__WEBPACK_IMPORTED_MODULE_7__["LookContext"]);
  return __jsx(react__WEBPACK_IMPORTED_MODULE_4___default.a.Fragment, null, __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a, {
    id: "3851986464",
    dynamic: [theme.mobileHeaderColor, theme.alternateTextSubcolor, theme.shadowColor, theme.textSubcolor, look.font, look.mediumSize, theme.textColor, theme.textColor],
    __self: this
  }, "header.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;z-index:10;width:100%;height:50px;position:fixed;top:0;background-color:".concat(theme.mobileHeaderColor, ";-webkit-transition:-webkit-transform 0.2s 0s ease-in;-webkit-transition:transform 0.2s 0s ease-in;transition:transform 0.2s 0s ease-in;border-bottom:solid 1px ").concat(theme.alternateTextSubcolor, ";}header.__jsx-style-dynamic-selector::before{content:\"\";position:absolute;display:block;height:100%;width:100%;box-shadow:").concat(theme.shadowColor, " 0px 3px 10px 3px;}header.hidden.__jsx-style-dynamic-selector{-webkit-transform:translateY(-50px);-ms-transform:translateY(-50px);transform:translateY(-50px);}button.__jsx-style-dynamic-selector{-webkit-appearance:none;-moz-appearance:none;appearance:none;position:relative;border:none;background:none;padding:0;margin:5px 10px;width:40px;height:40px;display:block;padding-right:10px;border-right:solid 2px ").concat(theme.textSubcolor, ";}span.__jsx-style-dynamic-selector{font-family:").concat(look.font, ";font-size:").concat(look.mediumSize, "px;color:").concat(theme.textColor, ";line-height:50px;}.spacer.__jsx-style-dynamic-selector{margin-top:50px;}.line.__jsx-style-dynamic-selector{width:100%;height:4px;border-radius:2px;background-color:").concat(theme.textColor, ";margin:5px 0;pointer-events:none;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/Users/yaroslav/Developer/Study/NIT/LabNext/src/components/common.tsx */")), __jsx("header", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["3851986464", [theme.mobileHeaderColor, theme.alternateTextSubcolor, theme.shadowColor, theme.textSubcolor, look.font, look.mediumSize, theme.textColor, theme.textColor]]]) + " " + ((shown ? "" : "hidden") || ""),
    __source: {
      fileName: _jsxFileName,
      lineNumber: 80
    },
    __self: this
  }, __jsx("button", {
    onClick: function onClick() {
      console.log("ham");
      if (props.onHamburger) props.onHamburger();
    },
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["3851986464", [theme.mobileHeaderColor, theme.alternateTextSubcolor, theme.shadowColor, theme.textSubcolor, look.font, look.mediumSize, theme.textColor, theme.textColor]]]) + " " + ((props.animated ? "animated" : "") || ""),
    __source: {
      fileName: _jsxFileName,
      lineNumber: 81
    },
    __self: this
  }, __jsx("div", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["3851986464", [theme.mobileHeaderColor, theme.alternateTextSubcolor, theme.shadowColor, theme.textSubcolor, look.font, look.mediumSize, theme.textColor, theme.textColor]]]) + " " + "line",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 85
    },
    __self: this
  }), __jsx("div", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["3851986464", [theme.mobileHeaderColor, theme.alternateTextSubcolor, theme.shadowColor, theme.textSubcolor, look.font, look.mediumSize, theme.textColor, theme.textColor]]]) + " " + "line",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 86
    },
    __self: this
  }), __jsx("div", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["3851986464", [theme.mobileHeaderColor, theme.alternateTextSubcolor, theme.shadowColor, theme.textSubcolor, look.font, look.mediumSize, theme.textColor, theme.textColor]]]) + " " + "line",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 87
    },
    __self: this
  })), __jsx("span", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["3851986464", [theme.mobileHeaderColor, theme.alternateTextSubcolor, theme.shadowColor, theme.textSubcolor, look.font, look.mediumSize, theme.textColor, theme.textColor]]]),
    __source: {
      fileName: _jsxFileName,
      lineNumber: 89
    },
    __self: this
  }, props.title)), __jsx("div", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["3851986464", [theme.mobileHeaderColor, theme.alternateTextSubcolor, theme.shadowColor, theme.textSubcolor, look.font, look.mediumSize, theme.textColor, theme.textColor]]]) + " " + "spacer",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 91
    },
    __self: this
  }));
};
var NavLink = function NavLink(props) {
  var theme = Object(react__WEBPACK_IMPORTED_MODULE_4__["useContext"])(_style__WEBPACK_IMPORTED_MODULE_7__["ThemeContext"]);
  var look = Object(react__WEBPACK_IMPORTED_MODULE_4__["useContext"])(_style__WEBPACK_IMPORTED_MODULE_7__["LookContext"]);
  return __jsx(react__WEBPACK_IMPORTED_MODULE_4___default.a.Fragment, null, __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a, {
    id: "2936551692",
    dynamic: [theme.alternateTextColor, look.font, props.selected ? look.largeSize : look.mediumSize, props.selected ? 800 : 400],
    __self: this
  }, "a.__jsx-style-dynamic-selector{-webkit-text-decoration:none;text-decoration:none;display:contents;padding:10px 20px;}div.__jsx-style-dynamic-selector{grid-column:1;width:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}span.__jsx-style-dynamic-selector{grid-column:2;color:".concat(theme.alternateTextColor, ";font-family:").concat(look.font, ";font-size:").concat(props.selected ? look.largeSize : look.mediumSize, "px;font-weight:").concat(props.selected ? 800 : 400, ";}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/Users/yaroslav/Developer/Study/NIT/LabNext/src/components/common.tsx */")), __jsx(next_link__WEBPACK_IMPORTED_MODULE_5___default.a, {
    href: props.href,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 126
    },
    __self: this
  }, __jsx("a", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["2936551692", [theme.alternateTextColor, look.font, props.selected ? look.largeSize : look.mediumSize, props.selected ? 800 : 400]]]),
    __source: {
      fileName: _jsxFileName,
      lineNumber: 127
    },
    __self: this
  }, __jsx("div", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["2936551692", [theme.alternateTextColor, look.font, props.selected ? look.largeSize : look.mediumSize, props.selected ? 800 : 400]]]),
    __source: {
      fileName: _jsxFileName,
      lineNumber: 128
    },
    __self: this
  }, props.thumb), __jsx("span", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["2936551692", [theme.alternateTextColor, look.font, props.selected ? look.largeSize : look.mediumSize, props.selected ? 800 : 400]]]),
    __source: {
      fileName: _jsxFileName,
      lineNumber: 129
    },
    __self: this
  }, props.label))));
};
var Sidebar = function Sidebar(props) {
  var theme = Object(react__WEBPACK_IMPORTED_MODULE_4__["useContext"])(_style__WEBPACK_IMPORTED_MODULE_7__["ThemeContext"]); // let circle = <div style={{height: 15, width: 15, backgroundColor: theme.alternateTextColor, borderRadius: "50%"}} />

  var circle = __jsx(react__WEBPACK_IMPORTED_MODULE_4___default.a.Fragment, null);

  return __jsx(react__WEBPACK_IMPORTED_MODULE_4___default.a.Fragment, null, __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a, {
    id: "2261469770",
    dynamic: [theme.headerColor, theme.shadowColor],
    __self: this
  }, ".navigation.__jsx-style-dynamic-selector{display:grid;grid-template-columns:auto;margin:10px;}header.__jsx-style-dynamic-selector{z-index:20;position:fixed;width:250px;height:100vh;background-color:".concat(theme.headerColor, ";box-shadow:").concat(theme.shadowColor, " 5px 0px 8px;-webkit-transition:-webkit-transform 0.2s 0s ease-in;-webkit-transition:transform 0.2s 0s ease-in;transition:transform 0.2s 0s ease-in;}header.hidden.__jsx-style-dynamic-selector{-webkit-transform:translateX(-260px);-ms-transform:translateX(-260px);transform:translateX(-260px);}img.__jsx-style-dynamic-selector{margin:5%;margin-top:40px;}.spacer.__jsx-style-dynamic-selector{margin-right:250px;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/Users/yaroslav/Developer/Study/NIT/LabNext/src/components/common.tsx */")), __jsx("header", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["2261469770", [theme.headerColor, theme.shadowColor]]]) + " " + ((props.hidden ? "hidden" : "") || ""),
    __source: {
      fileName: _jsxFileName,
      lineNumber: 170
    },
    __self: this
  }, __jsx("img", {
    src: "static/assets/SVG/White-logo.svg",
    alt: "Shop logo",
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["2261469770", [theme.headerColor, theme.shadowColor]]]) + " " + "logo",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 171
    },
    __self: this
  }), __jsx("div", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["2261469770", [theme.headerColor, theme.shadowColor]]]) + " " + "navigation",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 172
    },
    __self: this
  }, __jsx(NavLink, {
    selected: props.path == "/",
    thumb: circle,
    label: "All Items",
    href: "/",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 173
    },
    __self: this
  }), __jsx(NavLink, {
    selected: props.path == "/accessories",
    thumb: circle,
    label: "Hats",
    href: "/accessories",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 174
    },
    __self: this
  }), __jsx(NavLink, {
    selected: props.path == "/tops",
    thumb: circle,
    label: "Tops",
    href: "/tops",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 175
    },
    __self: this
  }), __jsx(NavLink, {
    selected: props.path == "/leggins",
    thumb: circle,
    label: "Leggins",
    href: "/leggins",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 176
    },
    __self: this
  }))));
};
var Footer = function Footer(props) {
  var theme = Object(react__WEBPACK_IMPORTED_MODULE_4__["useContext"])(_style__WEBPACK_IMPORTED_MODULE_7__["ThemeContext"]);
  var look = Object(react__WEBPACK_IMPORTED_MODULE_4__["useContext"])(_style__WEBPACK_IMPORTED_MODULE_7__["LookContext"]);
  return __jsx(react__WEBPACK_IMPORTED_MODULE_4___default.a.Fragment, null, __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a, {
    id: "2488257988",
    dynamic: [theme.footerColor, look.smallSize, theme.alternateTextSubcolor, look.font, theme.alternateTextColor, look.font, theme.alternateTextColor, look.subSmallSize, look.font, look.smallSize],
    __self: this
  }, "footer.__jsx-style-dynamic-selector{width:100%;background-color:".concat(theme.footerColor, ";position:relative;bottom:0;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;font-size:").concat(look.smallSize, "px;}.logo.__jsx-style-dynamic-selector{margin:20px;margin-top:40px;height:100px;}.text-thin.__jsx-style-dynamic-selector{color:").concat(theme.alternateTextSubcolor, ";font-family:").concat(look.font, ";font-weight:300;}.text-bold.__jsx-style-dynamic-selector{color:").concat(theme.alternateTextColor, ";font-family:").concat(look.font, ";font-weight:650;}a.__jsx-style-dynamic-selector{-webkit-text-decoration:none;text-decoration:none;}.copyright.__jsx-style-dynamic-selector{color:").concat(theme.alternateTextColor, ";position:absolute;bottom:0;right:0;margin:5px;font-size:").concat(look.subSmallSize, "px;font-family:").concat(look.font, ";}.footer-textbox.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;margin:20px;}.footer-contact.__jsx-style-dynamic-selector{font-size:").concat(look.smallSize, "px;}@media (max-width:700px){footer.__jsx-style-dynamic-selector{-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;}}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/Users/yaroslav/Developer/Study/NIT/LabNext/src/components/common.tsx */")), __jsx("footer", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["2488257988", [theme.footerColor, look.smallSize, theme.alternateTextSubcolor, look.font, theme.alternateTextColor, look.font, theme.alternateTextColor, look.subSmallSize, look.font, look.smallSize]]]),
    __source: {
      fileName: _jsxFileName,
      lineNumber: 237
    },
    __self: this
  }, __jsx("img", {
    src: "static/assets/SVG/White-logo.svg",
    alt: "Shop logo",
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["2488257988", [theme.footerColor, look.smallSize, theme.alternateTextSubcolor, look.font, theme.alternateTextColor, look.font, theme.alternateTextColor, look.subSmallSize, look.font, look.smallSize]]]) + " " + "logo",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 238
    },
    __self: this
  }), __jsx("div", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["2488257988", [theme.footerColor, look.smallSize, theme.alternateTextSubcolor, look.font, theme.alternateTextColor, look.font, theme.alternateTextColor, look.subSmallSize, look.font, look.smallSize]]]) + " " + "footer-textbox",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 239
    },
    __self: this
  }, __jsx("span", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["2488257988", [theme.footerColor, look.smallSize, theme.alternateTextSubcolor, look.font, theme.alternateTextColor, look.font, theme.alternateTextColor, look.subSmallSize, look.font, look.smallSize]]]) + " " + "text-thin",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 240
    },
    __self: this
  }, "Designed and developed by"), __jsx("span", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["2488257988", [theme.footerColor, look.smallSize, theme.alternateTextSubcolor, look.font, theme.alternateTextColor, look.font, theme.alternateTextColor, look.subSmallSize, look.font, look.smallSize]]]) + " " + "text-bold",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 241
    },
    __self: this
  }, "Petryk Yaroslav")), __jsx("div", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["2488257988", [theme.footerColor, look.smallSize, theme.alternateTextSubcolor, look.font, theme.alternateTextColor, look.font, theme.alternateTextColor, look.subSmallSize, look.font, look.smallSize]]]) + " " + "footer-contact",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 243
    },
    __self: this
  }, __jsx("div", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["2488257988", [theme.footerColor, look.smallSize, theme.alternateTextSubcolor, look.font, theme.alternateTextColor, look.font, theme.alternateTextColor, look.subSmallSize, look.font, look.smallSize]]]) + " " + "footer-textbox",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 244
    },
    __self: this
  }, __jsx("span", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["2488257988", [theme.footerColor, look.smallSize, theme.alternateTextSubcolor, look.font, theme.alternateTextColor, look.font, theme.alternateTextColor, look.subSmallSize, look.font, look.smallSize]]]) + " " + "text-thin",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 245
    },
    __self: this
  }, "Email"), __jsx("span", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["2488257988", [theme.footerColor, look.smallSize, theme.alternateTextSubcolor, look.font, theme.alternateTextColor, look.font, theme.alternateTextColor, look.subSmallSize, look.font, look.smallSize]]]) + " " + "text-bold",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 246
    },
    __self: this
  }, __jsx("a", {
    href: "mailto:yaroslav.petryk@ukma.edu.ua",
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["2488257988", [theme.footerColor, look.smallSize, theme.alternateTextSubcolor, look.font, theme.alternateTextColor, look.font, theme.alternateTextColor, look.subSmallSize, look.font, look.smallSize]]]),
    __source: {
      fileName: _jsxFileName,
      lineNumber: 246
    },
    __self: this
  }, "yaroslav.petryk@ukma.edu.ua"))), __jsx("div", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["2488257988", [theme.footerColor, look.smallSize, theme.alternateTextSubcolor, look.font, theme.alternateTextColor, look.font, theme.alternateTextColor, look.subSmallSize, look.font, look.smallSize]]]) + " " + "footer-textbox",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 248
    },
    __self: this
  }, __jsx("span", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["2488257988", [theme.footerColor, look.smallSize, theme.alternateTextSubcolor, look.font, theme.alternateTextColor, look.font, theme.alternateTextColor, look.subSmallSize, look.font, look.smallSize]]]) + " " + "text-thin",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 249
    },
    __self: this
  }, "Personal website"), __jsx("span", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["2488257988", [theme.footerColor, look.smallSize, theme.alternateTextSubcolor, look.font, theme.alternateTextColor, look.font, theme.alternateTextColor, look.subSmallSize, look.font, look.smallSize]]]) + " " + "text-bold",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 250
    },
    __self: this
  }, "Should I have one?"))), __jsx("span", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["2488257988", [theme.footerColor, look.smallSize, theme.alternateTextSubcolor, look.font, theme.alternateTextColor, look.font, theme.alternateTextColor, look.subSmallSize, look.font, look.smallSize]]]) + " " + "copyright ",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 253
    },
    __self: this
  }, "\xA9 Petryk Yaroslav. 2019. Icon made from ", __jsx("a", {
    href: "http://www.onlinewebfonts.com/icon",
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["2488257988", [theme.footerColor, look.smallSize, theme.alternateTextSubcolor, look.font, theme.alternateTextColor, look.font, theme.alternateTextColor, look.subSmallSize, look.font, look.smallSize]]]),
    __source: {
      fileName: _jsxFileName,
      lineNumber: 253
    },
    __self: this
  }, "Icon Fonts"), " is licensed by CC BY 3.0")));
};
var AppFrame = function AppFrame(props) {
  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_4__["useState"])(_style__WEBPACK_IMPORTED_MODULE_7__["Light"]),
      theme = _useState[0],
      setTheme = _useState[1];

  var _useWindowBounds = Object(_hooks__WEBPACK_IMPORTED_MODULE_11__["useWindowBounds"])(),
      width = _useWindowBounds.width;

  var mobile = width ? width < 700 : false;

  var _useState2 = Object(react__WEBPACK_IMPORTED_MODULE_4__["useState"])(true),
      hiddenSidebar = _useState2[0],
      setHiddenSidebar = _useState2[1];

  var dimmingRef = Object(react__WEBPACK_IMPORTED_MODULE_4__["useRef"])(null);
  Object(_hooks__WEBPACK_IMPORTED_MODULE_11__["useClick"])(dimmingRef, function () {
    if (!hiddenSidebar) setHiddenSidebar(true);
  }, [hiddenSidebar]);
  Object(_hooks__WEBPACK_IMPORTED_MODULE_11__["useKeyDown"])(function (e) {
    if (!hiddenSidebar && e.key == "Escape") setHiddenSidebar(true);
  }, [hiddenSidebar]);
  Object(react__WEBPACK_IMPORTED_MODULE_4__["useEffect"])(function () {
    if (width && width < 700 && !hiddenSidebar) setHiddenSidebar(true);
    if (width && width > 700 && hiddenSidebar) setHiddenSidebar(false);
  }, [width]);
  Object(react__WEBPACK_IMPORTED_MODULE_4__["useEffect"])(function () {
    var match = window.matchMedia("(prefers-color-scheme: dark)").matches;
    setTheme(match ? _style__WEBPACK_IMPORTED_MODULE_7__["Dark"] : _style__WEBPACK_IMPORTED_MODULE_7__["Light"]);

    function match_func(_ref) {
      var matches = _ref.matches;
      if (matches) setTheme(_style__WEBPACK_IMPORTED_MODULE_7__["Dark"]);else setTheme(_style__WEBPACK_IMPORTED_MODULE_7__["Light"]);
    }

    window.matchMedia("(prefers-color-scheme: dark)").addListener(match_func);
    return function () {
      return window.matchMedia("(prefers-color-scheme: dark)").removeListener(match_func);
    };
  }, []);
  return __jsx(react__WEBPACK_IMPORTED_MODULE_4___default.a.Fragment, null, __jsx("link", {
    href: "https://fonts.googleapis.com/css?family=Libre+Baskerville:700&display=swap",
    rel: "stylesheet",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 288
    },
    __self: this
  }), __jsx(_style__WEBPACK_IMPORTED_MODULE_7__["ThemeContext"].Provider, {
    value: theme,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 289
    },
    __self: this
  }, __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a, {
    id: "1333839732",
    dynamic: [theme.backgroundColor],
    __self: this
  }, "body{margin:0;padding:0;background-color:".concat(theme.backgroundColor, ";}a{color:inherit;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/Users/yaroslav/Developer/Study/NIT/LabNext/src/components/common.tsx */")), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a, {
    id: "2499839239",
    dynamic: [theme.dimmingColor],
    __self: this
  }, ".app.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}.content.__jsx-style-dynamic-selector{width:100%;min-height:100vh;position:relative;overflow-x:hidden;}.sidebar.__jsx-style-dynamic-selector{margin-right:250px;}.dimmer.__jsx-style-dynamic-selector{width:100vw;height:100vh;position:fixed;top:0;left:0;background-color:".concat(theme.dimmingColor, ";opacity:1;z-index:15;-webkit-transition:opacity 0.2s 0s ease-in;transition:opacity 0.2s 0s ease-in;}.dimmer.hidden.__jsx-style-dynamic-selector{opacity:0;z-index:0;}.spacer.__jsx-style-dynamic-selector{margin-right:250px;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/Users/yaroslav/Developer/Study/NIT/LabNext/src/components/common.tsx */")), __jsx(next_head__WEBPACK_IMPORTED_MODULE_6___default.a, {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 332
    },
    __self: this
  }, __jsx("title", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["1333839732", [theme.backgroundColor]], ["2499839239", [theme.dimmingColor]]]),
    __source: {
      fileName: _jsxFileName,
      lineNumber: 333
    },
    __self: this
  }, "Fast Shop" + (props.name ? ": ".concat(props.name) : ""))), __jsx("div", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["1333839732", [theme.backgroundColor]], ["2499839239", [theme.dimmingColor]]]) + " " + "app",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 335
    },
    __self: this
  }, __jsx(Sidebar, {
    path: props.path,
    hidden: hiddenSidebar,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 336
    },
    __self: this
  }), mobile ? __jsx(react__WEBPACK_IMPORTED_MODULE_4___default.a.Fragment, null, __jsx("div", {
    ref: dimmingRef,
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["1333839732", [theme.backgroundColor]], ["2499839239", [theme.dimmingColor]]]) + " " + ("dimmer" + (hiddenSidebar ? " hidden" : "") || false),
    __source: {
      fileName: _jsxFileName,
      lineNumber: 339
    },
    __self: this
  }), __jsx(MobileHeader, {
    title: props.name || "Fast shop",
    onHamburger: function onHamburger() {
      setHiddenSidebar(!hiddenSidebar);
    },
    __source: {
      fileName: _jsxFileName,
      lineNumber: 340
    },
    __self: this
  })) : __jsx("div", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["1333839732", [theme.backgroundColor]], ["2499839239", [theme.dimmingColor]]]) + " " + "spacer",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 344
    },
    __self: this
  }), __jsx("div", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["1333839732", [theme.backgroundColor]], ["2499839239", [theme.dimmingColor]]]) + " " + "content",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 346
    },
    __self: this
  }, props.children, __jsx(_layout__WEBPACK_IMPORTED_MODULE_8__["VSpaced"], {
    style: {
      bottom: 0,
      width: "100%"
    },
    __source: {
      fileName: _jsxFileName,
      lineNumber: 348
    },
    __self: this
  }, __jsx(Footer, {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 349
    },
    __self: this
  }))))));
};
var Storefront = function Storefront(props) {
  var _useReducer = Object(react__WEBPACK_IMPORTED_MODULE_4__["useReducer"])(_shopping__WEBPACK_IMPORTED_MODULE_10__["SCReducer"], {
    shown: false,
    items: []
  }),
      shoppingCartItems = _useReducer[0],
      dispatch = _useReducer[1];

  Object(react__WEBPACK_IMPORTED_MODULE_4__["useEffect"])(function () {
    var version = localStorage.getItem("cart_version");

    if (!version || !(version == _shopping__WEBPACK_IMPORTED_MODULE_10__["SHOPPING_CART_VERSION"])) {
      localStorage.setItem("cart", _babel_runtime_corejs2_core_js_json_stringify__WEBPACK_IMPORTED_MODULE_2___default()({
        items: []
      }));
      localStorage.setItem("cart_version", String(_shopping__WEBPACK_IMPORTED_MODULE_10__["SHOPPING_CART_VERSION"]));
    } else {
      var cart = localStorage.getItem("cart");

      try {
        if (cart) dispatch({
          type: _shopping__WEBPACK_IMPORTED_MODULE_10__["SCActionType"].reset,
          resetState: JSON.parse(cart)
        });
      } catch (e) {
        console.error(e);
      }
    }
  }, []);
  Object(react__WEBPACK_IMPORTED_MODULE_4__["useEffect"])(function () {
    localStorage.setItem("cart", _babel_runtime_corejs2_core_js_json_stringify__WEBPACK_IMPORTED_MODULE_2___default()(shoppingCartItems.items));
  }, [shoppingCartItems]);
  var sections = [];

  var buyHandler = function buyHandler(item) {
    dispatch({
      type: _shopping__WEBPACK_IMPORTED_MODULE_10__["SCActionType"].add,
      id: item.id,
      count: 1,
      fallbackItem: item
    });
  };

  if (props.items) {
    sections.push(__jsx(_section__WEBPACK_IMPORTED_MODULE_9__["Section"], {
      items: props.items,
      key: -1,
      onBuy: buyHandler,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 388
      },
      __self: this
    }));
  }

  if (props.sections) {
    sections.push.apply(sections, Object(_babel_runtime_corejs2_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__["default"])(props.sections.map(function (props, index) {
      return __jsx(_section__WEBPACK_IMPORTED_MODULE_9__["Section"], Object(_babel_runtime_corejs2_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({}, props, {
        key: index,
        onBuy: buyHandler,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 391
        },
        __self: this
      }));
    })));
  }

  return __jsx(_shopping__WEBPACK_IMPORTED_MODULE_10__["ShoppingCartContext"].Provider, {
    value: dispatch,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 393
    },
    __self: this
  }, sections, __jsx(_shopping__WEBPACK_IMPORTED_MODULE_10__["ShoppingCart"], Object(_babel_runtime_corejs2_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({}, shoppingCartItems, {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 395
    },
    __self: this
  })));
};
var ErrorMsg = function ErrorMsg(props) {
  var theme = Object(react__WEBPACK_IMPORTED_MODULE_4__["useContext"])(_style__WEBPACK_IMPORTED_MODULE_7__["ThemeContext"]);
  var look = Object(react__WEBPACK_IMPORTED_MODULE_4__["useContext"])(_style__WEBPACK_IMPORTED_MODULE_7__["LookContext"]);

  var _useState3 = Object(react__WEBPACK_IMPORTED_MODULE_4__["useState"])(false),
      shown = _useState3[0],
      setShown = _useState3[1];

  Object(react__WEBPACK_IMPORTED_MODULE_4__["useEffect"])(function () {
    if (!props.prominent && shown) {
      var handle = setTimeout(function () {
        setShown(false);
      }, 6000);
      return function () {
        return clearTimeout(handle);
      };
    }
  }, [shown]);
  Object(react__WEBPACK_IMPORTED_MODULE_4__["useEffect"])(function () {
    setTimeout(function () {
      return setShown(true);
    }, 500);
  }, []);
  return __jsx(react__WEBPACK_IMPORTED_MODULE_4___default.a.Fragment, null, __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a, {
    id: "1345866052",
    dynamic: [theme.textColor, look.font, look.smallSize, theme.mobileHeaderColor, theme.shadowColor, theme.mobileHeaderColor, theme.subbackgroundColor, theme.textColor, theme.textColor, theme.textSubcolor, theme.textSubcolor],
    __self: this
  }, "span.__jsx-style-dynamic-selector{color:".concat(theme.textColor, ";font-family:").concat(look.font, ";font-size:").concat(look.smallSize, "px;}.container.__jsx-style-dynamic-selector{padding:10px 20px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;background-color:").concat(theme.mobileHeaderColor, ";box-shadow:").concat(theme.shadowColor, " 3px 3px 10px 3px;-webkit-transition:-webkit-transform 0.4s 0s ease-in;-webkit-transition:transform 0.4s 0s ease-in;transition:transform 0.4s 0s ease-in;position:fixed;z-index:30;top:0;-webkit-transform:translateY(-200%);-ms-transform:translateY(-200%);transform:translateY(-200%);border-radius:calc( ( 2em + 20px ) / 2);margin:20px;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.container.shown.__jsx-style-dynamic-selector{-webkit-transform:translateY(0);-ms-transform:translateY(0);transform:translateY(0);}.cross.__jsx-style-dynamic-selector{-webkit-appearance:none;-moz-appearance:none;appearance:none;border:none;background-color:").concat(theme.mobileHeaderColor, ";padding:0;width:30px;height:30px;position:relative;margin-left:5px;margin-right:-5px;border-radius:15px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;}.cross.__jsx-style-dynamic-selector:active{background-color:").concat(theme.subbackgroundColor, ";}.cross.__jsx-style-dynamic-selector:hover.__jsx-style-dynamic-selector::before{background-color:").concat(theme.textColor, ";}.cross.__jsx-style-dynamic-selector:hover.__jsx-style-dynamic-selector::after{background-color:").concat(theme.textColor, ";}.cross.__jsx-style-dynamic-selector::before{content:\"\";display:block;position:absolute;width:66%;height:2px;border-radius:1px;background-color:").concat(theme.textSubcolor, ";-webkit-transform:rotate(45deg);-ms-transform:rotate(45deg);transform:rotate(45deg);}.cross.__jsx-style-dynamic-selector::after{content:\"\";display:block;position:absolute;width:66%;height:2px;border-radius:1px;background-color:").concat(theme.textSubcolor, ";-webkit-transform:rotate(-45deg);-ms-transform:rotate(-45deg);transform:rotate(-45deg);}.center.__jsx-style-dynamic-selector{width:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/Users/yaroslav/Developer/Study/NIT/LabNext/src/components/common.tsx */")), __jsx("div", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["1345866052", [theme.textColor, look.font, look.smallSize, theme.mobileHeaderColor, theme.shadowColor, theme.mobileHeaderColor, theme.subbackgroundColor, theme.textColor, theme.textColor, theme.textSubcolor, theme.textSubcolor]]]) + " " + "center",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 495
    },
    __self: this
  }, __jsx("div", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["1345866052", [theme.textColor, look.font, look.smallSize, theme.mobileHeaderColor, theme.shadowColor, theme.mobileHeaderColor, theme.subbackgroundColor, theme.textColor, theme.textColor, theme.textSubcolor, theme.textSubcolor]]]) + " " + ("container" + (shown ? " shown" : "") || false),
    __source: {
      fileName: _jsxFileName,
      lineNumber: 496
    },
    __self: this
  }, __jsx("span", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["1345866052", [theme.textColor, look.font, look.smallSize, theme.mobileHeaderColor, theme.shadowColor, theme.mobileHeaderColor, theme.subbackgroundColor, theme.textColor, theme.textColor, theme.textSubcolor, theme.textSubcolor]]]),
    __source: {
      fileName: _jsxFileName,
      lineNumber: 497
    },
    __self: this
  }, props.msg), __jsx("button", {
    onClick: function onClick() {
      return setShown(false);
    },
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([["1345866052", [theme.textColor, look.font, look.smallSize, theme.mobileHeaderColor, theme.shadowColor, theme.mobileHeaderColor, theme.subbackgroundColor, theme.textColor, theme.textColor, theme.textSubcolor, theme.textSubcolor]]]) + " " + "cross",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 498
    },
    __self: this
  }))));
};

/***/ })

})
//# sourceMappingURL=index.js.d22f0050bdeba80a201f.hot-update.js.map